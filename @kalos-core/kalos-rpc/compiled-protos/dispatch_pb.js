// source: dispatch.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var timeoff_request_pb = require('./timeoff_request_pb.js');
goog.object.extend(proto, timeoff_request_pb);
var event_pb = require('./event_pb.js');
goog.object.extend(proto, event_pb);
goog.exportSymbol('proto.DispatchCall', null, global);
goog.exportSymbol('proto.DispatchCallBack', null, global);
goog.exportSymbol('proto.DispatchCallBacksList', null, global);
goog.exportSymbol('proto.DispatchCallCount', null, global);
goog.exportSymbol('proto.DispatchCallCountList', null, global);
goog.exportSymbol('proto.DispatchCallList', null, global);
goog.exportSymbol('proto.DispatchCallTime', null, global);
goog.exportSymbol('proto.DispatchCallTimeList', null, global);
goog.exportSymbol('proto.DispatchFirstCall', null, global);
goog.exportSymbol('proto.DispatchFirstCallList', null, global);
goog.exportSymbol('proto.DispatchableTech', null, global);
goog.exportSymbol('proto.DispatchableTechList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchableTech = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchableTech.repeatedFields_, null);
};
goog.inherits(proto.DispatchableTech, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchableTech.displayName = 'proto.DispatchableTech';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchableTechList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchableTechList.repeatedFields_, null);
};
goog.inherits(proto.DispatchableTechList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchableTechList.displayName = 'proto.DispatchableTechList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchCall.repeatedFields_, null);
};
goog.inherits(proto.DispatchCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCall.displayName = 'proto.DispatchCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchCallList.repeatedFields_, null);
};
goog.inherits(proto.DispatchCallList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallList.displayName = 'proto.DispatchCallList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallBack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DispatchCallBack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallBack.displayName = 'proto.DispatchCallBack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallBacksList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchCallBacksList.repeatedFields_, null);
};
goog.inherits(proto.DispatchCallBacksList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallBacksList.displayName = 'proto.DispatchCallBacksList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DispatchCallTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallTime.displayName = 'proto.DispatchCallTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallTimeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchCallTimeList.repeatedFields_, null);
};
goog.inherits(proto.DispatchCallTimeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallTimeList.displayName = 'proto.DispatchCallTimeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DispatchCallCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallCount.displayName = 'proto.DispatchCallCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchCallCountList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchCallCountList.repeatedFields_, null);
};
goog.inherits(proto.DispatchCallCountList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchCallCountList.displayName = 'proto.DispatchCallCountList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchFirstCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchFirstCall.repeatedFields_, null);
};
goog.inherits(proto.DispatchFirstCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchFirstCall.displayName = 'proto.DispatchFirstCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DispatchFirstCallList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DispatchFirstCallList.repeatedFields_, null);
};
goog.inherits(proto.DispatchFirstCallList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DispatchFirstCallList.displayName = 'proto.DispatchFirstCallList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchableTech.repeatedFields_ = [14,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchableTech.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchableTech.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchableTech} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchableTech.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    techname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jobType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    propertyUserId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    propertyId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    propertyCity: jspb.Message.getFieldWithDefault(msg, 9, ""),
    geolocationLat: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    geolocationLng: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    activity: jspb.Message.getFieldWithDefault(msg, 12, ""),
    activityDate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    callBacksList: jspb.Message.toObjectList(msg.getCallBacksList(),
    proto.DispatchCallBack.toObject, includeInstance),
    callTimesList: jspb.Message.toObjectList(msg.getCallTimesList(),
    proto.DispatchCallTime.toObject, includeInstance),
    callCountList: jspb.Message.toObjectList(msg.getCallCountList(),
    proto.DispatchCallCount.toObject, includeInstance),
    hoursWorked: jspb.Message.getFieldWithDefault(msg, 17, 0),
    currentJob: (f = msg.getCurrentJob()) && event_pb.Event.toObject(includeInstance, f),
    departmentList: jspb.Message.getFieldWithDefault(msg, 19, ""),
    departmentCode: jspb.Message.getFieldWithDefault(msg, 20, 0),
    dateRange: (f = msg.getDateRange()) && common_pb.DateRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchableTech}
 */
proto.DispatchableTech.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchableTech;
  return proto.DispatchableTech.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchableTech} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchableTech}
 */
proto.DispatchableTech.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTechname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyUserId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyCity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGeolocationLat(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGeolocationLng(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivity(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityDate(value);
      break;
    case 14:
      var value = new proto.DispatchCallBack;
      reader.readMessage(value,proto.DispatchCallBack.deserializeBinaryFromReader);
      msg.addCallBacks(value);
      break;
    case 15:
      var value = new proto.DispatchCallTime;
      reader.readMessage(value,proto.DispatchCallTime.deserializeBinaryFromReader);
      msg.addCallTimes(value);
      break;
    case 16:
      var value = new proto.DispatchCallCount;
      reader.readMessage(value,proto.DispatchCallCount.deserializeBinaryFromReader);
      msg.addCallCount(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHoursWorked(value);
      break;
    case 18:
      var value = new event_pb.Event;
      reader.readMessage(value,event_pb.Event.deserializeBinaryFromReader);
      msg.setCurrentJob(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartmentList(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentCode(value);
      break;
    case 21:
      var value = new common_pb.DateRange;
      reader.readMessage(value,common_pb.DateRange.deserializeBinaryFromReader);
      msg.setDateRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchableTech.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchableTech.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchableTech} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchableTech.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTechname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJobType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPropertyUserId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPropertyCity();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGeolocationLat();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getGeolocationLng();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getActivity();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getActivityDate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCallBacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.DispatchCallBack.serializeBinaryToWriter
    );
  }
  f = message.getCallTimesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.DispatchCallTime.serializeBinaryToWriter
    );
  }
  f = message.getCallCountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.DispatchCallCount.serializeBinaryToWriter
    );
  }
  f = message.getHoursWorked();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getCurrentJob();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      event_pb.Event.serializeBinaryToWriter
    );
  }
  f = message.getDepartmentList();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getDepartmentCode();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getDateRange();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      common_pb.DateRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.DispatchableTech.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string techname = 2;
 * @return {string}
 */
proto.DispatchableTech.prototype.getTechname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setTechname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string job_type = 3;
 * @return {string}
 */
proto.DispatchableTech.prototype.getJobType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setJobType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_phone = 4;
 * @return {string}
 */
proto.DispatchableTech.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_email = 5;
 * @return {string}
 */
proto.DispatchableTech.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 event_id = 6;
 * @return {number}
 */
proto.DispatchableTech.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 property_user_id = 7;
 * @return {number}
 */
proto.DispatchableTech.prototype.getPropertyUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setPropertyUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 property_id = 8;
 * @return {number}
 */
proto.DispatchableTech.prototype.getPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string property_city = 9;
 * @return {string}
 */
proto.DispatchableTech.prototype.getPropertyCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setPropertyCity = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional double geolocation_lat = 10;
 * @return {number}
 */
proto.DispatchableTech.prototype.getGeolocationLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setGeolocationLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double geolocation_lng = 11;
 * @return {number}
 */
proto.DispatchableTech.prototype.getGeolocationLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setGeolocationLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional string activity = 12;
 * @return {string}
 */
proto.DispatchableTech.prototype.getActivity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setActivity = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string activity_date = 13;
 * @return {string}
 */
proto.DispatchableTech.prototype.getActivityDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setActivityDate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated DispatchCallBack call_backs = 14;
 * @return {!Array<!proto.DispatchCallBack>}
 */
proto.DispatchableTech.prototype.getCallBacksList = function() {
  return /** @type{!Array<!proto.DispatchCallBack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCallBack, 14));
};


/**
 * @param {!Array<!proto.DispatchCallBack>} value
 * @return {!proto.DispatchableTech} returns this
*/
proto.DispatchableTech.prototype.setCallBacksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.DispatchCallBack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCallBack}
 */
proto.DispatchableTech.prototype.addCallBacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.DispatchCallBack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.clearCallBacksList = function() {
  return this.setCallBacksList([]);
};


/**
 * repeated DispatchCallTime call_times = 15;
 * @return {!Array<!proto.DispatchCallTime>}
 */
proto.DispatchableTech.prototype.getCallTimesList = function() {
  return /** @type{!Array<!proto.DispatchCallTime>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCallTime, 15));
};


/**
 * @param {!Array<!proto.DispatchCallTime>} value
 * @return {!proto.DispatchableTech} returns this
*/
proto.DispatchableTech.prototype.setCallTimesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.DispatchCallTime=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCallTime}
 */
proto.DispatchableTech.prototype.addCallTimes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.DispatchCallTime, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.clearCallTimesList = function() {
  return this.setCallTimesList([]);
};


/**
 * repeated DispatchCallCount call_count = 16;
 * @return {!Array<!proto.DispatchCallCount>}
 */
proto.DispatchableTech.prototype.getCallCountList = function() {
  return /** @type{!Array<!proto.DispatchCallCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCallCount, 16));
};


/**
 * @param {!Array<!proto.DispatchCallCount>} value
 * @return {!proto.DispatchableTech} returns this
*/
proto.DispatchableTech.prototype.setCallCountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.DispatchCallCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCallCount}
 */
proto.DispatchableTech.prototype.addCallCount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.DispatchCallCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.clearCallCountList = function() {
  return this.setCallCountList([]);
};


/**
 * optional int32 hours_worked = 17;
 * @return {number}
 */
proto.DispatchableTech.prototype.getHoursWorked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setHoursWorked = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional Event current_job = 18;
 * @return {?proto.Event}
 */
proto.DispatchableTech.prototype.getCurrentJob = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, event_pb.Event, 18));
};


/**
 * @param {?proto.Event|undefined} value
 * @return {!proto.DispatchableTech} returns this
*/
proto.DispatchableTech.prototype.setCurrentJob = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.clearCurrentJob = function() {
  return this.setCurrentJob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DispatchableTech.prototype.hasCurrentJob = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string department_list = 19;
 * @return {string}
 */
proto.DispatchableTech.prototype.getDepartmentList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setDepartmentList = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional int32 department_code = 20;
 * @return {number}
 */
proto.DispatchableTech.prototype.getDepartmentCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.setDepartmentCode = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional DateRange date_range = 21;
 * @return {?proto.DateRange}
 */
proto.DispatchableTech.prototype.getDateRange = function() {
  return /** @type{?proto.DateRange} */ (
    jspb.Message.getWrapperField(this, common_pb.DateRange, 21));
};


/**
 * @param {?proto.DateRange|undefined} value
 * @return {!proto.DispatchableTech} returns this
*/
proto.DispatchableTech.prototype.setDateRange = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DispatchableTech} returns this
 */
proto.DispatchableTech.prototype.clearDateRange = function() {
  return this.setDateRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DispatchableTech.prototype.hasDateRange = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchableTechList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchableTechList.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchableTechList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchableTechList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchableTechList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.DispatchableTech.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchableTechList}
 */
proto.DispatchableTechList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchableTechList;
  return proto.DispatchableTechList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchableTechList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchableTechList}
 */
proto.DispatchableTechList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DispatchableTech;
      reader.readMessage(value,proto.DispatchableTech.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchableTechList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchableTechList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchableTechList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchableTechList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DispatchableTech.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DispatchableTech results = 1;
 * @return {!Array<!proto.DispatchableTech>}
 */
proto.DispatchableTechList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.DispatchableTech>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchableTech, 1));
};


/**
 * @param {!Array<!proto.DispatchableTech>} value
 * @return {!proto.DispatchableTechList} returns this
*/
proto.DispatchableTechList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DispatchableTech=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchableTech}
 */
proto.DispatchableTechList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DispatchableTech, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchableTechList} returns this
 */
proto.DispatchableTechList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.DispatchableTechList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchableTechList} returns this
 */
proto.DispatchableTechList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchCall.repeatedFields_ = [29,34,35,36];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCall.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    custName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userBusinessname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isCallback: jspb.Message.getFieldWithDefault(msg, 6, 0),
    propertyIsResidential: jspb.Message.getFieldWithDefault(msg, 7, 0),
    logNotes: jspb.Message.getFieldWithDefault(msg, 8, ""),
    dateStarted: jspb.Message.getFieldWithDefault(msg, 9, ""),
    dateEnded: jspb.Message.getFieldWithDefault(msg, 10, ""),
    timeStarted: jspb.Message.getFieldWithDefault(msg, 11, ""),
    timeEnded: jspb.Message.getFieldWithDefault(msg, 12, ""),
    assigned: jspb.Message.getFieldWithDefault(msg, 13, ""),
    jobTypeId: jspb.Message.getFieldWithDefault(msg, 14, 0),
    jobTypeIdList: jspb.Message.getFieldWithDefault(msg, 15, ""),
    jobSubtypeId: jspb.Message.getFieldWithDefault(msg, 16, 0),
    propertyId: jspb.Message.getFieldWithDefault(msg, 17, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 18, 0),
    propertyAddress: jspb.Message.getFieldWithDefault(msg, 19, ""),
    propertyCity: jspb.Message.getFieldWithDefault(msg, 20, ""),
    propertyState: jspb.Message.getFieldWithDefault(msg, 21, ""),
    geolocationLat: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    geolocationLng: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
    logTechnicianAssigned: jspb.Message.getFieldWithDefault(msg, 24, ""),
    isResidential: jspb.Message.getFieldWithDefault(msg, 25, 0),
    departmentId: jspb.Message.getFieldWithDefault(msg, 26, 0),
    sectorGroup: jspb.Message.getFieldWithDefault(msg, 27, 0),
    sectorGroupList: jspb.Message.getFieldWithDefault(msg, 28, ""),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 29)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 30, 0),
    jobType: jspb.Message.getFieldWithDefault(msg, 31, ""),
    jobSubtype: jspb.Message.getFieldWithDefault(msg, 32, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 33, ""),
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 34)) == null ? undefined : f,
    dateTargetList: (f = jspb.Message.getRepeatedField(msg, 35)) == null ? undefined : f,
    notEqualsList: (f = jspb.Message.getRepeatedField(msg, 36)) == null ? undefined : f,
    userPhone: jspb.Message.getFieldWithDefault(msg, 37, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 38, ""),
    logJobstatus: jspb.Message.getFieldWithDefault(msg, 39, ""),
    logJobstatusList: jspb.Message.getFieldWithDefault(msg, 40, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCall}
 */
proto.DispatchCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCall;
  return proto.DispatchCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCall}
 */
proto.DispatchCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserBusinessname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsCallback(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyIsResidential(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogNotes(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateStarted(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateEnded(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeStarted(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeEnded(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigned(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobTypeId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobTypeIdList(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobSubtypeId(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyId(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyAddress(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyCity(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyState(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGeolocationLat(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGeolocationLng(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogTechnicianAssigned(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsResidential(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentId(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSectorGroup(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setSectorGroupList(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobType(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobSubtype(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateTarget(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.addNotEquals(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogJobstatus(value);
      break;
    case 40:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogJobstatusList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCustName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserBusinessname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsCallback();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPropertyIsResidential();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLogNotes();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDateStarted();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDateEnded();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTimeStarted();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTimeEnded();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAssigned();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getJobTypeId();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getJobTypeIdList();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getJobSubtypeId();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getPropertyAddress();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getPropertyCity();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getPropertyState();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getGeolocationLat();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getGeolocationLng();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getLogTechnicianAssigned();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getIsResidential();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getDepartmentId();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getSectorGroup();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getSectorGroupList();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      29,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getJobType();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getJobSubtype();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      34,
      f
    );
  }
  f = message.getDateTargetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      35,
      f
    );
  }
  f = message.getNotEqualsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      36,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getLogJobstatus();
  if (f.length > 0) {
    writer.writeString(
      39,
      f
    );
  }
  f = message.getLogJobstatusList();
  if (f.length > 0) {
    writer.writeString(
      40,
      f
    );
  }
};


/**
 * optional string cust_name = 1;
 * @return {string}
 */
proto.DispatchCall.prototype.getCustName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setCustName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_businessname = 2;
 * @return {string}
 */
proto.DispatchCall.prototype.getUserBusinessname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setUserBusinessname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 id = 3;
 * @return {number}
 */
proto.DispatchCall.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.DispatchCall.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.DispatchCall.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 is_callback = 6;
 * @return {number}
 */
proto.DispatchCall.prototype.getIsCallback = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setIsCallback = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 property_is_residential = 7;
 * @return {number}
 */
proto.DispatchCall.prototype.getPropertyIsResidential = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setPropertyIsResidential = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string log_notes = 8;
 * @return {string}
 */
proto.DispatchCall.prototype.getLogNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setLogNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string date_started = 9;
 * @return {string}
 */
proto.DispatchCall.prototype.getDateStarted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setDateStarted = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string date_ended = 10;
 * @return {string}
 */
proto.DispatchCall.prototype.getDateEnded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setDateEnded = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string time_started = 11;
 * @return {string}
 */
proto.DispatchCall.prototype.getTimeStarted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setTimeStarted = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string time_ended = 12;
 * @return {string}
 */
proto.DispatchCall.prototype.getTimeEnded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setTimeEnded = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string assigned = 13;
 * @return {string}
 */
proto.DispatchCall.prototype.getAssigned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setAssigned = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 job_type_id = 14;
 * @return {number}
 */
proto.DispatchCall.prototype.getJobTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setJobTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string job_type_id_list = 15;
 * @return {string}
 */
proto.DispatchCall.prototype.getJobTypeIdList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setJobTypeIdList = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 job_subtype_id = 16;
 * @return {number}
 */
proto.DispatchCall.prototype.getJobSubtypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setJobSubtypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 property_id = 17;
 * @return {number}
 */
proto.DispatchCall.prototype.getPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 user_id = 18;
 * @return {number}
 */
proto.DispatchCall.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional string property_address = 19;
 * @return {string}
 */
proto.DispatchCall.prototype.getPropertyAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setPropertyAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string property_city = 20;
 * @return {string}
 */
proto.DispatchCall.prototype.getPropertyCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setPropertyCity = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string property_state = 21;
 * @return {string}
 */
proto.DispatchCall.prototype.getPropertyState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setPropertyState = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional double geolocation_lat = 22;
 * @return {number}
 */
proto.DispatchCall.prototype.getGeolocationLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setGeolocationLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double geolocation_lng = 23;
 * @return {number}
 */
proto.DispatchCall.prototype.getGeolocationLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setGeolocationLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional string log_technician_assigned = 24;
 * @return {string}
 */
proto.DispatchCall.prototype.getLogTechnicianAssigned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setLogTechnicianAssigned = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional int32 is_residential = 25;
 * @return {number}
 */
proto.DispatchCall.prototype.getIsResidential = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setIsResidential = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int32 department_id = 26;
 * @return {number}
 */
proto.DispatchCall.prototype.getDepartmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setDepartmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int32 sector_group = 27;
 * @return {number}
 */
proto.DispatchCall.prototype.getSectorGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setSectorGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional string sector_group_list = 28;
 * @return {string}
 */
proto.DispatchCall.prototype.getSectorGroupList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setSectorGroupList = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * repeated string field_mask = 29;
 * @return {!Array<string>}
 */
proto.DispatchCall.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 29));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 29, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 29, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 30;
 * @return {number}
 */
proto.DispatchCall.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional string job_type = 31;
 * @return {string}
 */
proto.DispatchCall.prototype.getJobType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setJobType = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string job_subtype = 32;
 * @return {string}
 */
proto.DispatchCall.prototype.getJobSubtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setJobSubtype = function(value) {
  return jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional string notes = 33;
 * @return {string}
 */
proto.DispatchCall.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * repeated string date_range = 34;
 * @return {!Array<string>}
 */
proto.DispatchCall.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 34));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};


/**
 * repeated string date_target = 35;
 * @return {!Array<string>}
 */
proto.DispatchCall.prototype.getDateTargetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 35));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setDateTargetList = function(value) {
  return jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.addDateTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.clearDateTargetList = function() {
  return this.setDateTargetList([]);
};


/**
 * repeated string not_equals = 36;
 * @return {!Array<string>}
 */
proto.DispatchCall.prototype.getNotEqualsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 36));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setNotEqualsList = function(value) {
  return jspb.Message.setField(this, 36, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.addNotEquals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 36, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.clearNotEqualsList = function() {
  return this.setNotEqualsList([]);
};


/**
 * optional string user_phone = 37;
 * @return {string}
 */
proto.DispatchCall.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional string user_email = 38;
 * @return {string}
 */
proto.DispatchCall.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string log_jobStatus = 39;
 * @return {string}
 */
proto.DispatchCall.prototype.getLogJobstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setLogJobstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 39, value);
};


/**
 * optional string log_jobStatus_list = 40;
 * @return {string}
 */
proto.DispatchCall.prototype.getLogJobstatusList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCall} returns this
 */
proto.DispatchCall.prototype.setLogJobstatusList = function(value) {
  return jspb.Message.setProto3StringField(this, 40, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchCallList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallList.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.DispatchCall.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallList}
 */
proto.DispatchCallList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallList;
  return proto.DispatchCallList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallList}
 */
proto.DispatchCallList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DispatchCall;
      reader.readMessage(value,proto.DispatchCall.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DispatchCall.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DispatchCall results = 1;
 * @return {!Array<!proto.DispatchCall>}
 */
proto.DispatchCallList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.DispatchCall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCall, 1));
};


/**
 * @param {!Array<!proto.DispatchCall>} value
 * @return {!proto.DispatchCallList} returns this
*/
proto.DispatchCallList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DispatchCall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCall}
 */
proto.DispatchCallList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DispatchCall, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCallList} returns this
 */
proto.DispatchCallList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.DispatchCallList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallList} returns this
 */
proto.DispatchCallList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallBack.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallBack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallBack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallBack.toObject = function(includeInstance, msg) {
  var f, obj = {
    technicianId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serviceCallbacks: jspb.Message.getFieldWithDefault(msg, 2, 0),
    projectCallbacks: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallBack}
 */
proto.DispatchCallBack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallBack;
  return proto.DispatchCallBack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallBack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallBack}
 */
proto.DispatchCallBack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTechnicianId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceCallbacks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProjectCallbacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallBack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallBack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallBack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallBack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTechnicianId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServiceCallbacks();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProjectCallbacks();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 technician_id = 1;
 * @return {number}
 */
proto.DispatchCallBack.prototype.getTechnicianId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallBack} returns this
 */
proto.DispatchCallBack.prototype.setTechnicianId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 service_callbacks = 2;
 * @return {number}
 */
proto.DispatchCallBack.prototype.getServiceCallbacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallBack} returns this
 */
proto.DispatchCallBack.prototype.setServiceCallbacks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 project_callbacks = 3;
 * @return {number}
 */
proto.DispatchCallBack.prototype.getProjectCallbacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallBack} returns this
 */
proto.DispatchCallBack.prototype.setProjectCallbacks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchCallBacksList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallBacksList.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallBacksList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallBacksList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallBacksList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.DispatchCallBack.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallBacksList}
 */
proto.DispatchCallBacksList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallBacksList;
  return proto.DispatchCallBacksList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallBacksList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallBacksList}
 */
proto.DispatchCallBacksList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DispatchCallBack;
      reader.readMessage(value,proto.DispatchCallBack.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallBacksList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallBacksList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallBacksList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallBacksList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DispatchCallBack.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DispatchCallBack results = 1;
 * @return {!Array<!proto.DispatchCallBack>}
 */
proto.DispatchCallBacksList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.DispatchCallBack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCallBack, 1));
};


/**
 * @param {!Array<!proto.DispatchCallBack>} value
 * @return {!proto.DispatchCallBacksList} returns this
*/
proto.DispatchCallBacksList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DispatchCallBack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCallBack}
 */
proto.DispatchCallBacksList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DispatchCallBack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCallBacksList} returns this
 */
proto.DispatchCallBacksList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.DispatchCallBacksList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallBacksList} returns this
 */
proto.DispatchCallBacksList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallTime.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    technicianId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jobType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avgMinutesDriving: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    avgMinutesOnCall: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallTime}
 */
proto.DispatchCallTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallTime;
  return proto.DispatchCallTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallTime}
 */
proto.DispatchCallTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTechnicianId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgMinutesDriving(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgMinutesOnCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTechnicianId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getJobType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvgMinutesDriving();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAvgMinutesOnCall();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional int32 technician_id = 1;
 * @return {number}
 */
proto.DispatchCallTime.prototype.getTechnicianId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallTime} returns this
 */
proto.DispatchCallTime.prototype.setTechnicianId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string job_type = 2;
 * @return {string}
 */
proto.DispatchCallTime.prototype.getJobType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCallTime} returns this
 */
proto.DispatchCallTime.prototype.setJobType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float avg_minutes_driving = 3;
 * @return {number}
 */
proto.DispatchCallTime.prototype.getAvgMinutesDriving = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallTime} returns this
 */
proto.DispatchCallTime.prototype.setAvgMinutesDriving = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float avg_minutes_on_call = 4;
 * @return {number}
 */
proto.DispatchCallTime.prototype.getAvgMinutesOnCall = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallTime} returns this
 */
proto.DispatchCallTime.prototype.setAvgMinutesOnCall = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchCallTimeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallTimeList.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallTimeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallTimeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallTimeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.DispatchCallTime.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallTimeList}
 */
proto.DispatchCallTimeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallTimeList;
  return proto.DispatchCallTimeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallTimeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallTimeList}
 */
proto.DispatchCallTimeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DispatchCallTime;
      reader.readMessage(value,proto.DispatchCallTime.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallTimeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallTimeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallTimeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallTimeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DispatchCallTime.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DispatchCallTime results = 1;
 * @return {!Array<!proto.DispatchCallTime>}
 */
proto.DispatchCallTimeList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.DispatchCallTime>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCallTime, 1));
};


/**
 * @param {!Array<!proto.DispatchCallTime>} value
 * @return {!proto.DispatchCallTimeList} returns this
*/
proto.DispatchCallTimeList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DispatchCallTime=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCallTime}
 */
proto.DispatchCallTimeList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DispatchCallTime, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCallTimeList} returns this
 */
proto.DispatchCallTimeList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.DispatchCallTimeList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallTimeList} returns this
 */
proto.DispatchCallTimeList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallCount.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    technicianId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jobType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jobSubType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallCount}
 */
proto.DispatchCallCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallCount;
  return proto.DispatchCallCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallCount}
 */
proto.DispatchCallCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTechnicianId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobSubType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTechnicianId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getJobType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJobSubType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 technician_id = 1;
 * @return {number}
 */
proto.DispatchCallCount.prototype.getTechnicianId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallCount} returns this
 */
proto.DispatchCallCount.prototype.setTechnicianId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string job_type = 2;
 * @return {string}
 */
proto.DispatchCallCount.prototype.getJobType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCallCount} returns this
 */
proto.DispatchCallCount.prototype.setJobType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string job_sub_type = 3;
 * @return {string}
 */
proto.DispatchCallCount.prototype.getJobSubType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchCallCount} returns this
 */
proto.DispatchCallCount.prototype.setJobSubType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.DispatchCallCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallCount} returns this
 */
proto.DispatchCallCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchCallCountList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchCallCountList.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchCallCountList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchCallCountList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallCountList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.DispatchCallCount.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchCallCountList}
 */
proto.DispatchCallCountList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchCallCountList;
  return proto.DispatchCallCountList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchCallCountList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchCallCountList}
 */
proto.DispatchCallCountList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DispatchCallCount;
      reader.readMessage(value,proto.DispatchCallCount.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchCallCountList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchCallCountList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchCallCountList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchCallCountList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DispatchCallCount.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DispatchCallCount results = 1;
 * @return {!Array<!proto.DispatchCallCount>}
 */
proto.DispatchCallCountList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.DispatchCallCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchCallCount, 1));
};


/**
 * @param {!Array<!proto.DispatchCallCount>} value
 * @return {!proto.DispatchCallCountList} returns this
*/
proto.DispatchCallCountList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DispatchCallCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchCallCount}
 */
proto.DispatchCallCountList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DispatchCallCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchCallCountList} returns this
 */
proto.DispatchCallCountList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.DispatchCallCountList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchCallCountList} returns this
 */
proto.DispatchCallCountList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchFirstCall.repeatedFields_ = [24];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchFirstCall.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchFirstCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchFirstCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchFirstCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    custName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userBusinessname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isCallback: jspb.Message.getFieldWithDefault(msg, 6, 0),
    propertyIsResidential: jspb.Message.getFieldWithDefault(msg, 7, 0),
    logNotes: jspb.Message.getFieldWithDefault(msg, 8, ""),
    dateStarted: jspb.Message.getFieldWithDefault(msg, 9, ""),
    dateEnded: jspb.Message.getFieldWithDefault(msg, 10, ""),
    timeStarted: jspb.Message.getFieldWithDefault(msg, 11, ""),
    timeEnded: jspb.Message.getFieldWithDefault(msg, 12, ""),
    assigned: jspb.Message.getFieldWithDefault(msg, 13, ""),
    jobTypeId: jspb.Message.getFieldWithDefault(msg, 14, 0),
    jobSubtypeId: jspb.Message.getFieldWithDefault(msg, 15, 0),
    propertyId: jspb.Message.getFieldWithDefault(msg, 16, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 17, 0),
    propertyAddress: jspb.Message.getFieldWithDefault(msg, 18, ""),
    propertyCity: jspb.Message.getFieldWithDefault(msg, 19, ""),
    geolocationLat: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    geolocationLng: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    logTechnicianAssigned: jspb.Message.getFieldWithDefault(msg, 22, ""),
    groupId: jspb.Message.getFieldWithDefault(msg, 23, 0),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 24)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 25, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchFirstCall}
 */
proto.DispatchFirstCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchFirstCall;
  return proto.DispatchFirstCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchFirstCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchFirstCall}
 */
proto.DispatchFirstCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserBusinessname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsCallback(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyIsResidential(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogNotes(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateStarted(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateEnded(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeStarted(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeEnded(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigned(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobTypeId(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobSubtypeId(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyId(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyAddress(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyCity(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGeolocationLat(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGeolocationLng(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogTechnicianAssigned(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchFirstCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchFirstCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchFirstCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchFirstCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCustName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserBusinessname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsCallback();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPropertyIsResidential();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLogNotes();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDateStarted();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDateEnded();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTimeStarted();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTimeEnded();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAssigned();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getJobTypeId();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getJobSubtypeId();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getPropertyAddress();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getPropertyCity();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getGeolocationLat();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getGeolocationLng();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getLogTechnicianAssigned();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      24,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
};


/**
 * optional string cust_name = 1;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getCustName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setCustName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_businessname = 2;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getUserBusinessname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setUserBusinessname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 id = 3;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 is_callback = 6;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getIsCallback = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setIsCallback = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 property_is_residential = 7;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getPropertyIsResidential = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setPropertyIsResidential = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string log_notes = 8;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getLogNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setLogNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string date_started = 9;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getDateStarted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setDateStarted = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string date_ended = 10;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getDateEnded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setDateEnded = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string time_started = 11;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getTimeStarted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setTimeStarted = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string time_ended = 12;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getTimeEnded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setTimeEnded = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string assigned = 13;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getAssigned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setAssigned = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 job_type_id = 14;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getJobTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setJobTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 job_subtype_id = 15;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getJobSubtypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setJobSubtypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 property_id = 16;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 user_id = 17;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string property_address = 18;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getPropertyAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setPropertyAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string property_city = 19;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getPropertyCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setPropertyCity = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional double geolocation_lat = 20;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getGeolocationLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setGeolocationLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double geolocation_lng = 21;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getGeolocationLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setGeolocationLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional string log_technician_assigned = 22;
 * @return {string}
 */
proto.DispatchFirstCall.prototype.getLogTechnicianAssigned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setLogTechnicianAssigned = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional int32 group_id = 23;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * repeated string field_mask = 24;
 * @return {!Array<string>}
 */
proto.DispatchFirstCall.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 24));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 24, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 24, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 25;
 * @return {number}
 */
proto.DispatchFirstCall.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCall} returns this
 */
proto.DispatchFirstCall.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DispatchFirstCallList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DispatchFirstCallList.prototype.toObject = function(opt_includeInstance) {
  return proto.DispatchFirstCallList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DispatchFirstCallList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchFirstCallList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.DispatchFirstCall.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DispatchFirstCallList}
 */
proto.DispatchFirstCallList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DispatchFirstCallList;
  return proto.DispatchFirstCallList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DispatchFirstCallList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DispatchFirstCallList}
 */
proto.DispatchFirstCallList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DispatchFirstCall;
      reader.readMessage(value,proto.DispatchFirstCall.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DispatchFirstCallList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DispatchFirstCallList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DispatchFirstCallList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DispatchFirstCallList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DispatchFirstCall.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DispatchFirstCall results = 1;
 * @return {!Array<!proto.DispatchFirstCall>}
 */
proto.DispatchFirstCallList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.DispatchFirstCall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DispatchFirstCall, 1));
};


/**
 * @param {!Array<!proto.DispatchFirstCall>} value
 * @return {!proto.DispatchFirstCallList} returns this
*/
proto.DispatchFirstCallList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DispatchFirstCall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DispatchFirstCall}
 */
proto.DispatchFirstCallList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DispatchFirstCall, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DispatchFirstCallList} returns this
 */
proto.DispatchFirstCallList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.DispatchFirstCallList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DispatchFirstCallList} returns this
 */
proto.DispatchFirstCallList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
