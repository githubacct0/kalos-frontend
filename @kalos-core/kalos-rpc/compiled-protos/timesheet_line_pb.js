// source: timesheet_line.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var timesheet_classcode_pb = require('./timesheet_classcode_pb.js');
goog.object.extend(proto, timesheet_classcode_pb);
var services_rendered_pb = require('./services_rendered_pb.js');
goog.object.extend(proto, services_rendered_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var user_pb = require('./user_pb.js');
goog.object.extend(proto, user_pb);
goog.exportSymbol('proto.SubmitApproveReq', null, global);
goog.exportSymbol('proto.Timesheet', null, global);
goog.exportSymbol('proto.TimesheetDay', null, global);
goog.exportSymbol('proto.TimesheetLine', null, global);
goog.exportSymbol('proto.TimesheetLineExpress', null, global);
goog.exportSymbol('proto.TimesheetLineList', null, global);
goog.exportSymbol('proto.TimesheetReq', null, global);
goog.exportSymbol('proto.UserTimesheet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimesheetLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimesheetLine.repeatedFields_, null);
};
goog.inherits(proto.TimesheetLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimesheetLine.displayName = 'proto.TimesheetLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimesheetLineExpress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimesheetLineExpress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimesheetLineExpress.displayName = 'proto.TimesheetLineExpress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimesheetLineList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimesheetLineList.repeatedFields_, null);
};
goog.inherits(proto.TimesheetLineList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimesheetLineList.displayName = 'proto.TimesheetLineList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitApproveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SubmitApproveReq.repeatedFields_, null);
};
goog.inherits(proto.SubmitApproveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SubmitApproveReq.displayName = 'proto.SubmitApproveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimesheetDay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimesheetDay.repeatedFields_, null);
};
goog.inherits(proto.TimesheetDay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimesheetDay.displayName = 'proto.TimesheetDay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Timesheet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Timesheet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Timesheet.displayName = 'proto.Timesheet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserTimesheet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserTimesheet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserTimesheet.displayName = 'proto.UserTimesheet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimesheetReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimesheetReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimesheetReq.displayName = 'proto.TimesheetReq';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimesheetLine.repeatedFields_ = [17,20,21,26];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimesheetLine.prototype.toObject = function(opt_includeInstance) {
  return proto.TimesheetLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimesheetLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    servicesRenderedId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    taskEventId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    classCodeId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    departmentCode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    briefDescription: jspb.Message.getFieldWithDefault(msg, 7, ""),
    referenceNumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 9, ""),
    adminApprovalUserId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    adminApprovalDatetime: jspb.Message.getFieldWithDefault(msg, 11, ""),
    userApprovalDatetime: jspb.Message.getFieldWithDefault(msg, 12, ""),
    timeStarted: jspb.Message.getFieldWithDefault(msg, 13, ""),
    timeFinished: jspb.Message.getFieldWithDefault(msg, 14, ""),
    technicianUserId: jspb.Message.getFieldWithDefault(msg, 15, 0),
    isActive: jspb.Message.getFieldWithDefault(msg, 16, 0),
    classCode: (f = msg.getClassCode()) && timesheet_classcode_pb.TimesheetClassCode.toObject(includeInstance, f),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 18, 0),
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
    dateTargetList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    eventPropertyId: jspb.Message.getFieldWithDefault(msg, 22, 0),
    eventUserId: jspb.Message.getFieldWithDefault(msg, 23, 0),
    technicianUserName: jspb.Message.getFieldWithDefault(msg, 24, ""),
    departmentName: jspb.Message.getFieldWithDefault(msg, 25, ""),
    notEqualsList: (f = jspb.Message.getRepeatedField(msg, 26)) == null ? undefined : f,
    orderBy: jspb.Message.getFieldWithDefault(msg, 27, ""),
    orderDir: jspb.Message.getFieldWithDefault(msg, 28, ""),
    groupBy: jspb.Message.getFieldWithDefault(msg, 29, ""),
    weekStart: jspb.Message.getFieldWithDefault(msg, 30, ""),
    weekEnd: jspb.Message.getFieldWithDefault(msg, 31, ""),
    payrollProcessed: jspb.Message.getBooleanFieldWithDefault(msg, 32, false),
    adminApprovalUserName: jspb.Message.getFieldWithDefault(msg, 33, ""),
    hoursWorked: jspb.Message.getFloatingPointFieldWithDefault(msg, 34, 0.0),
    withoutLimit: jspb.Message.getBooleanFieldWithDefault(msg, 35, false),
    searchUser: (f = msg.getSearchUser()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimesheetLine}
 */
proto.TimesheetLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimesheetLine;
  return proto.TimesheetLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimesheetLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimesheetLine}
 */
proto.TimesheetLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServicesRenderedId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskEventId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClassCodeId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentCode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBriefDescription(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceNumber(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdminApprovalUserId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminApprovalDatetime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserApprovalDatetime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeStarted(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeFinished(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTechnicianUserId(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsActive(value);
      break;
    case 19:
      var value = new timesheet_classcode_pb.TimesheetClassCode;
      reader.readMessage(value,timesheet_classcode_pb.TimesheetClassCode.deserializeBinaryFromReader);
      msg.setClassCode(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateTarget(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventPropertyId(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventUserId(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setTechnicianUserName(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartmentName(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.addNotEquals(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDir(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupBy(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeekStart(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeekEnd(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPayrollProcessed(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminApprovalUserName(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHoursWorked(value);
      break;
    case 35:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutLimit(value);
      break;
    case 36:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSearchUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimesheetLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimesheetLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimesheetLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServicesRenderedId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTaskEventId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getClassCodeId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDepartmentCode();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBriefDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReferenceNumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAdminApprovalUserId();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getAdminApprovalDatetime();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserApprovalDatetime();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTimeStarted();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getTimeFinished();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getTechnicianUserId();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIsActive();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getClassCode();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      timesheet_classcode_pb.TimesheetClassCode.serializeBinaryToWriter
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getDateTargetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      21,
      f
    );
  }
  f = message.getEventPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getEventUserId();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getTechnicianUserName();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getDepartmentName();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getNotEqualsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      26,
      f
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getOrderDir();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getGroupBy();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getWeekStart();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getWeekEnd();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getPayrollProcessed();
  if (f) {
    writer.writeBool(
      32,
      f
    );
  }
  f = message.getAdminApprovalUserName();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getHoursWorked();
  if (f !== 0.0) {
    writer.writeDouble(
      34,
      f
    );
  }
  f = message.getWithoutLimit();
  if (f) {
    writer.writeBool(
      35,
      f
    );
  }
  f = message.getSearchUser();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TimesheetLine.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 event_id = 2;
 * @return {number}
 */
proto.TimesheetLine.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 services_rendered_id = 3;
 * @return {number}
 */
proto.TimesheetLine.prototype.getServicesRenderedId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setServicesRenderedId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 task_event_id = 4;
 * @return {number}
 */
proto.TimesheetLine.prototype.getTaskEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setTaskEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 class_code_id = 5;
 * @return {number}
 */
proto.TimesheetLine.prototype.getClassCodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setClassCodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 department_code = 6;
 * @return {number}
 */
proto.TimesheetLine.prototype.getDepartmentCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setDepartmentCode = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string brief_description = 7;
 * @return {string}
 */
proto.TimesheetLine.prototype.getBriefDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setBriefDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string reference_number = 8;
 * @return {string}
 */
proto.TimesheetLine.prototype.getReferenceNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setReferenceNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string notes = 9;
 * @return {string}
 */
proto.TimesheetLine.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 admin_approval_user_id = 10;
 * @return {number}
 */
proto.TimesheetLine.prototype.getAdminApprovalUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setAdminApprovalUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string admin_approval_datetime = 11;
 * @return {string}
 */
proto.TimesheetLine.prototype.getAdminApprovalDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setAdminApprovalDatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string user_approval_datetime = 12;
 * @return {string}
 */
proto.TimesheetLine.prototype.getUserApprovalDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setUserApprovalDatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string time_started = 13;
 * @return {string}
 */
proto.TimesheetLine.prototype.getTimeStarted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setTimeStarted = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string time_finished = 14;
 * @return {string}
 */
proto.TimesheetLine.prototype.getTimeFinished = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setTimeFinished = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 technician_user_id = 15;
 * @return {number}
 */
proto.TimesheetLine.prototype.getTechnicianUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setTechnicianUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 is_active = 16;
 * @return {number}
 */
proto.TimesheetLine.prototype.getIsActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional TimesheetClassCode class_code = 19;
 * @return {?proto.TimesheetClassCode}
 */
proto.TimesheetLine.prototype.getClassCode = function() {
  return /** @type{?proto.TimesheetClassCode} */ (
    jspb.Message.getWrapperField(this, timesheet_classcode_pb.TimesheetClassCode, 19));
};


/**
 * @param {?proto.TimesheetClassCode|undefined} value
 * @return {!proto.TimesheetLine} returns this
*/
proto.TimesheetLine.prototype.setClassCode = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.clearClassCode = function() {
  return this.setClassCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimesheetLine.prototype.hasClassCode = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated string field_mask = 17;
 * @return {!Array<string>}
 */
proto.TimesheetLine.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 18;
 * @return {number}
 */
proto.TimesheetLine.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * repeated string date_range = 20;
 * @return {!Array<string>}
 */
proto.TimesheetLine.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};


/**
 * repeated string date_target = 21;
 * @return {!Array<string>}
 */
proto.TimesheetLine.prototype.getDateTargetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setDateTargetList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.addDateTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.clearDateTargetList = function() {
  return this.setDateTargetList([]);
};


/**
 * optional int32 event_property_id = 22;
 * @return {number}
 */
proto.TimesheetLine.prototype.getEventPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setEventPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 event_user_id = 23;
 * @return {number}
 */
proto.TimesheetLine.prototype.getEventUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setEventUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string technician_user_name = 24;
 * @return {string}
 */
proto.TimesheetLine.prototype.getTechnicianUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setTechnicianUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string department_name = 25;
 * @return {string}
 */
proto.TimesheetLine.prototype.getDepartmentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setDepartmentName = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * repeated string not_equals = 26;
 * @return {!Array<string>}
 */
proto.TimesheetLine.prototype.getNotEqualsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 26));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setNotEqualsList = function(value) {
  return jspb.Message.setField(this, 26, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.addNotEquals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 26, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.clearNotEqualsList = function() {
  return this.setNotEqualsList([]);
};


/**
 * optional string order_by = 27;
 * @return {string}
 */
proto.TimesheetLine.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string order_dir = 28;
 * @return {string}
 */
proto.TimesheetLine.prototype.getOrderDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setOrderDir = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string group_by = 29;
 * @return {string}
 */
proto.TimesheetLine.prototype.getGroupBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setGroupBy = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string week_start = 30;
 * @return {string}
 */
proto.TimesheetLine.prototype.getWeekStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setWeekStart = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string week_end = 31;
 * @return {string}
 */
proto.TimesheetLine.prototype.getWeekEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setWeekEnd = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional bool payroll_processed = 32;
 * @return {boolean}
 */
proto.TimesheetLine.prototype.getPayrollProcessed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setPayrollProcessed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 32, value);
};


/**
 * optional string admin_approval_user_name = 33;
 * @return {string}
 */
proto.TimesheetLine.prototype.getAdminApprovalUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setAdminApprovalUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional double hours_worked = 34;
 * @return {number}
 */
proto.TimesheetLine.prototype.getHoursWorked = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 34, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setHoursWorked = function(value) {
  return jspb.Message.setProto3FloatField(this, 34, value);
};


/**
 * optional bool without_limit = 35;
 * @return {boolean}
 */
proto.TimesheetLine.prototype.getWithoutLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 35, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.setWithoutLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 35, value);
};


/**
 * optional User search_user = 36;
 * @return {?proto.User}
 */
proto.TimesheetLine.prototype.getSearchUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 36));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.TimesheetLine} returns this
*/
proto.TimesheetLine.prototype.setSearchUser = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimesheetLine} returns this
 */
proto.TimesheetLine.prototype.clearSearchUser = function() {
  return this.setSearchUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimesheetLine.prototype.hasSearchUser = function() {
  return jspb.Message.getField(this, 36) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimesheetLineExpress.prototype.toObject = function(opt_includeInstance) {
  return proto.TimesheetLineExpress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimesheetLineExpress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetLineExpress.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serviceId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    classCode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    department: jspb.Message.getFieldWithDefault(msg, 5, 0),
    billable: jspb.Message.getFieldWithDefault(msg, 6, 0),
    explanation: jspb.Message.getFieldWithDefault(msg, 7, ""),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    occurred: jspb.Message.getFieldWithDefault(msg, 9, ""),
    category: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimesheetLineExpress}
 */
proto.TimesheetLineExpress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimesheetLineExpress;
  return proto.TimesheetLineExpress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimesheetLineExpress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimesheetLineExpress}
 */
proto.TimesheetLineExpress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClassCode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartment(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBillable(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setExplanation(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOccurred(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimesheetLineExpress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimesheetLineExpress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimesheetLineExpress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetLineExpress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServiceId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getClassCode();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDepartment();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBillable();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getExplanation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getOccurred();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 event_id = 2;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 service_id = 3;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setServiceId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 class_code = 4;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getClassCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setClassCode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 department = 5;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getDepartment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setDepartment = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 billable = 6;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getBillable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setBillable = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string explanation = 7;
 * @return {string}
 */
proto.TimesheetLineExpress.prototype.getExplanation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setExplanation = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional double duration = 8;
 * @return {number}
 */
proto.TimesheetLineExpress.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string occurred = 9;
 * @return {string}
 */
proto.TimesheetLineExpress.prototype.getOccurred = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setOccurred = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string category = 10;
 * @return {string}
 */
proto.TimesheetLineExpress.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimesheetLineExpress} returns this
 */
proto.TimesheetLineExpress.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimesheetLineList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimesheetLineList.prototype.toObject = function(opt_includeInstance) {
  return proto.TimesheetLineList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimesheetLineList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetLineList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.TimesheetLine.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimesheetLineList}
 */
proto.TimesheetLineList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimesheetLineList;
  return proto.TimesheetLineList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimesheetLineList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimesheetLineList}
 */
proto.TimesheetLineList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TimesheetLine;
      reader.readMessage(value,proto.TimesheetLine.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimesheetLineList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimesheetLineList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimesheetLineList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetLineList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TimesheetLine.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated TimesheetLine results = 1;
 * @return {!Array<!proto.TimesheetLine>}
 */
proto.TimesheetLineList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.TimesheetLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimesheetLine, 1));
};


/**
 * @param {!Array<!proto.TimesheetLine>} value
 * @return {!proto.TimesheetLineList} returns this
*/
proto.TimesheetLineList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TimesheetLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimesheetLine}
 */
proto.TimesheetLineList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TimesheetLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetLineList} returns this
 */
proto.TimesheetLineList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.TimesheetLineList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimesheetLineList} returns this
 */
proto.TimesheetLineList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SubmitApproveReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitApproveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitApproveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitApproveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitApproveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitApproveReq}
 */
proto.SubmitApproveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitApproveReq;
  return proto.SubmitApproveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitApproveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitApproveReq}
 */
proto.SubmitApproveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitApproveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitApproveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitApproveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitApproveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated int32 ids = 1;
 * @return {!Array<number>}
 */
proto.SubmitApproveReq.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SubmitApproveReq} returns this
 */
proto.SubmitApproveReq.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SubmitApproveReq} returns this
 */
proto.SubmitApproveReq.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SubmitApproveReq} returns this
 */
proto.SubmitApproveReq.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * optional int32 user_id = 2;
 * @return {number}
 */
proto.SubmitApproveReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SubmitApproveReq} returns this
 */
proto.SubmitApproveReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimesheetDay.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimesheetDay.prototype.toObject = function(opt_includeInstance) {
  return proto.TimesheetDay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimesheetDay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetDay.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesRenderedList: jspb.Message.toObjectList(msg.getServicesRenderedList(),
    services_rendered_pb.ServicesRendered.toObject, includeInstance),
    timesheetLineList: jspb.Message.toObjectList(msg.getTimesheetLineList(),
    proto.TimesheetLine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimesheetDay}
 */
proto.TimesheetDay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimesheetDay;
  return proto.TimesheetDay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimesheetDay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimesheetDay}
 */
proto.TimesheetDay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_rendered_pb.ServicesRendered;
      reader.readMessage(value,services_rendered_pb.ServicesRendered.deserializeBinaryFromReader);
      msg.addServicesRendered(value);
      break;
    case 2:
      var value = new proto.TimesheetLine;
      reader.readMessage(value,proto.TimesheetLine.deserializeBinaryFromReader);
      msg.addTimesheetLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimesheetDay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimesheetDay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimesheetDay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetDay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesRenderedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      services_rendered_pb.ServicesRendered.serializeBinaryToWriter
    );
  }
  f = message.getTimesheetLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TimesheetLine.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ServicesRendered services_rendered = 1;
 * @return {!Array<!proto.ServicesRendered>}
 */
proto.TimesheetDay.prototype.getServicesRenderedList = function() {
  return /** @type{!Array<!proto.ServicesRendered>} */ (
    jspb.Message.getRepeatedWrapperField(this, services_rendered_pb.ServicesRendered, 1));
};


/**
 * @param {!Array<!proto.ServicesRendered>} value
 * @return {!proto.TimesheetDay} returns this
*/
proto.TimesheetDay.prototype.setServicesRenderedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ServicesRendered=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServicesRendered}
 */
proto.TimesheetDay.prototype.addServicesRendered = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ServicesRendered, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetDay} returns this
 */
proto.TimesheetDay.prototype.clearServicesRenderedList = function() {
  return this.setServicesRenderedList([]);
};


/**
 * repeated TimesheetLine timesheet_line = 2;
 * @return {!Array<!proto.TimesheetLine>}
 */
proto.TimesheetDay.prototype.getTimesheetLineList = function() {
  return /** @type{!Array<!proto.TimesheetLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimesheetLine, 2));
};


/**
 * @param {!Array<!proto.TimesheetLine>} value
 * @return {!proto.TimesheetDay} returns this
*/
proto.TimesheetDay.prototype.setTimesheetLineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TimesheetLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimesheetLine}
 */
proto.TimesheetDay.prototype.addTimesheetLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TimesheetLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimesheetDay} returns this
 */
proto.TimesheetDay.prototype.clearTimesheetLineList = function() {
  return this.setTimesheetLineList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Timesheet.prototype.toObject = function(opt_includeInstance) {
  return proto.Timesheet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Timesheet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timesheet.toObject = function(includeInstance, msg) {
  var f, obj = {
    datesMap: (f = msg.getDatesMap()) ? f.toObject(includeInstance, proto.TimesheetDay.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Timesheet}
 */
proto.Timesheet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Timesheet;
  return proto.Timesheet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Timesheet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Timesheet}
 */
proto.Timesheet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDatesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.TimesheetDay.deserializeBinaryFromReader, "", new proto.TimesheetDay());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Timesheet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Timesheet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Timesheet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timesheet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.TimesheetDay.serializeBinaryToWriter);
  }
};


/**
 * map<string, TimesheetDay> dates = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.TimesheetDay>}
 */
proto.Timesheet.prototype.getDatesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.TimesheetDay>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.TimesheetDay));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Timesheet} returns this
 */
proto.Timesheet.prototype.clearDatesMap = function() {
  this.getDatesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserTimesheet.prototype.toObject = function(opt_includeInstance) {
  return proto.UserTimesheet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserTimesheet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserTimesheet.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    endDate: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserTimesheet}
 */
proto.UserTimesheet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserTimesheet;
  return proto.UserTimesheet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserTimesheet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserTimesheet}
 */
proto.UserTimesheet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserTimesheet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserTimesheet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserTimesheet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserTimesheet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEndDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.UserTimesheet.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserTimesheet} returns this
 */
proto.UserTimesheet.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string start_date = 2;
 * @return {string}
 */
proto.UserTimesheet.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.UserTimesheet} returns this
 */
proto.UserTimesheet.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string end_date = 3;
 * @return {string}
 */
proto.UserTimesheet.prototype.getEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.UserTimesheet} returns this
 */
proto.UserTimesheet.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimesheetReq.prototype.toObject = function(opt_includeInstance) {
  return proto.TimesheetReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimesheetReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    timesheetLine: (f = msg.getTimesheetLine()) && proto.TimesheetLine.toObject(includeInstance, f),
    servicesRendered: (f = msg.getServicesRendered()) && services_rendered_pb.ServicesRendered.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimesheetReq}
 */
proto.TimesheetReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimesheetReq;
  return proto.TimesheetReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimesheetReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimesheetReq}
 */
proto.TimesheetReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TimesheetLine;
      reader.readMessage(value,proto.TimesheetLine.deserializeBinaryFromReader);
      msg.setTimesheetLine(value);
      break;
    case 2:
      var value = new services_rendered_pb.ServicesRendered;
      reader.readMessage(value,services_rendered_pb.ServicesRendered.deserializeBinaryFromReader);
      msg.setServicesRendered(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimesheetReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimesheetReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimesheetReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimesheetReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimesheetLine();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TimesheetLine.serializeBinaryToWriter
    );
  }
  f = message.getServicesRendered();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      services_rendered_pb.ServicesRendered.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimesheetLine timesheet_line = 1;
 * @return {?proto.TimesheetLine}
 */
proto.TimesheetReq.prototype.getTimesheetLine = function() {
  return /** @type{?proto.TimesheetLine} */ (
    jspb.Message.getWrapperField(this, proto.TimesheetLine, 1));
};


/**
 * @param {?proto.TimesheetLine|undefined} value
 * @return {!proto.TimesheetReq} returns this
*/
proto.TimesheetReq.prototype.setTimesheetLine = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimesheetReq} returns this
 */
proto.TimesheetReq.prototype.clearTimesheetLine = function() {
  return this.setTimesheetLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimesheetReq.prototype.hasTimesheetLine = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ServicesRendered services_rendered = 2;
 * @return {?proto.ServicesRendered}
 */
proto.TimesheetReq.prototype.getServicesRendered = function() {
  return /** @type{?proto.ServicesRendered} */ (
    jspb.Message.getWrapperField(this, services_rendered_pb.ServicesRendered, 2));
};


/**
 * @param {?proto.ServicesRendered|undefined} value
 * @return {!proto.TimesheetReq} returns this
*/
proto.TimesheetReq.prototype.setServicesRendered = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimesheetReq} returns this
 */
proto.TimesheetReq.prototype.clearServicesRendered = function() {
  return this.setServicesRendered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimesheetReq.prototype.hasServicesRendered = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
