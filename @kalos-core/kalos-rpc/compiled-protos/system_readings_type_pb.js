// source: system_readings_type.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SystemReadingsType', null, global);
goog.exportSymbol('proto.SystemReadingsTypeList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SystemReadingsType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SystemReadingsType.repeatedFields_, null);
};
goog.inherits(proto.SystemReadingsType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SystemReadingsType.displayName = 'proto.SystemReadingsType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SystemReadingsTypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SystemReadingsTypeList.repeatedFields_, null);
};
goog.inherits(proto.SystemReadingsTypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SystemReadingsTypeList.displayName = 'proto.SystemReadingsTypeList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SystemReadingsType.repeatedFields_ = [41];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SystemReadingsType.prototype.toObject = function(opt_includeInstance) {
  return proto.SystemReadingsType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SystemReadingsType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemReadingsType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    refrigerantType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tstatBrand: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blowerCapacitor: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blowerAmps: jspb.Message.getFieldWithDefault(msg, 6, 0),
    returnTemperature: jspb.Message.getFieldWithDefault(msg, 7, 0),
    supplyTemperature: jspb.Message.getFieldWithDefault(msg, 8, 0),
    compressorAmps: jspb.Message.getFieldWithDefault(msg, 9, 0),
    condensingFanAmps: jspb.Message.getFieldWithDefault(msg, 10, 0),
    compressorCapacitor: jspb.Message.getFieldWithDefault(msg, 11, 0),
    condenserFanCapacitor: jspb.Message.getFieldWithDefault(msg, 12, 0),
    suctionPressure: jspb.Message.getFieldWithDefault(msg, 13, 0),
    headPressure: jspb.Message.getFieldWithDefault(msg, 14, 0),
    subcool: jspb.Message.getFieldWithDefault(msg, 15, 0),
    superheat: jspb.Message.getFieldWithDefault(msg, 16, 0),
    dischargeTemperature: jspb.Message.getFieldWithDefault(msg, 17, 0),
    gasType: jspb.Message.getFieldWithDefault(msg, 18, 0),
    burner: jspb.Message.getFieldWithDefault(msg, 19, 0),
    heatExchanger: jspb.Message.getFieldWithDefault(msg, 20, 0),
    thermostat: jspb.Message.getFieldWithDefault(msg, 21, 0),
    plateform: jspb.Message.getFieldWithDefault(msg, 22, 0),
    floatSwitch: jspb.Message.getFieldWithDefault(msg, 23, 0),
    evaporatorCoil: jspb.Message.getFieldWithDefault(msg, 24, 0),
    condenserCoil: jspb.Message.getFieldWithDefault(msg, 25, 0),
    hurricanePad: jspb.Message.getFieldWithDefault(msg, 26, 0),
    lineset: jspb.Message.getFieldWithDefault(msg, 27, 0),
    drainLine: jspb.Message.getFieldWithDefault(msg, 28, 0),
    poolSupplyTemp: jspb.Message.getFieldWithDefault(msg, 29, 0),
    poolReturnTemp: jspb.Message.getFieldWithDefault(msg, 30, 0),
    ambientAirTemp: jspb.Message.getFieldWithDefault(msg, 31, 0),
    returnWb: jspb.Message.getFieldWithDefault(msg, 32, 0),
    returnDb: jspb.Message.getFieldWithDefault(msg, 33, 0),
    evapTd: jspb.Message.getFieldWithDefault(msg, 34, 0),
    coilStaticDrop: jspb.Message.getFieldWithDefault(msg, 35, 0),
    tesp: jspb.Message.getFieldWithDefault(msg, 36, 0),
    gasPressureIn: jspb.Message.getFieldWithDefault(msg, 37, 0),
    gasPressureOut: jspb.Message.getFieldWithDefault(msg, 38, 0),
    llTempDrop: jspb.Message.getFieldWithDefault(msg, 39, 0),
    slTempDrop: jspb.Message.getFieldWithDefault(msg, 40, 0),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 41)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 42, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SystemReadingsType}
 */
proto.SystemReadingsType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SystemReadingsType;
  return proto.SystemReadingsType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SystemReadingsType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SystemReadingsType}
 */
proto.SystemReadingsType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefrigerantType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTstatBrand(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlowerCapacitor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlowerAmps(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReturnTemperature(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSupplyTemperature(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompressorAmps(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCondensingFanAmps(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompressorCapacitor(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCondenserFanCapacitor(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuctionPressure(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadPressure(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubcool(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuperheat(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDischargeTemperature(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasType(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBurner(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeatExchanger(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setThermostat(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlateform(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFloatSwitch(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEvaporatorCoil(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCondenserCoil(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHurricanePad(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineset(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDrainLine(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoolSupplyTemp(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoolReturnTemp(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmbientAirTemp(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReturnWb(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReturnDb(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEvapTd(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoilStaticDrop(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTesp(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasPressureIn(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasPressureOut(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLlTempDrop(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlTempDrop(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SystemReadingsType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SystemReadingsType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SystemReadingsType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemReadingsType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRefrigerantType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTstatBrand();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBlowerCapacitor();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBlowerAmps();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getReturnTemperature();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSupplyTemperature();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCompressorAmps();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCondensingFanAmps();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getCompressorCapacitor();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCondenserFanCapacitor();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getSuctionPressure();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getHeadPressure();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getSubcool();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getSuperheat();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getDischargeTemperature();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getGasType();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getBurner();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getHeatExchanger();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getThermostat();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getPlateform();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getFloatSwitch();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getEvaporatorCoil();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getCondenserCoil();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getHurricanePad();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getLineset();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getDrainLine();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = message.getPoolSupplyTemp();
  if (f !== 0) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = message.getPoolReturnTemp();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getAmbientAirTemp();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getReturnWb();
  if (f !== 0) {
    writer.writeInt32(
      32,
      f
    );
  }
  f = message.getReturnDb();
  if (f !== 0) {
    writer.writeInt32(
      33,
      f
    );
  }
  f = message.getEvapTd();
  if (f !== 0) {
    writer.writeInt32(
      34,
      f
    );
  }
  f = message.getCoilStaticDrop();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getTesp();
  if (f !== 0) {
    writer.writeInt32(
      36,
      f
    );
  }
  f = message.getGasPressureIn();
  if (f !== 0) {
    writer.writeInt32(
      37,
      f
    );
  }
  f = message.getGasPressureOut();
  if (f !== 0) {
    writer.writeInt32(
      38,
      f
    );
  }
  f = message.getLlTempDrop();
  if (f !== 0) {
    writer.writeInt32(
      39,
      f
    );
  }
  f = message.getSlTempDrop();
  if (f !== 0) {
    writer.writeInt32(
      40,
      f
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      41,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      42,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.SystemReadingsType.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 refrigerant_type = 3;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getRefrigerantType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setRefrigerantType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 tstat_brand = 4;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getTstatBrand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setTstatBrand = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 blower_capacitor = 5;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getBlowerCapacitor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setBlowerCapacitor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 blower_amps = 6;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getBlowerAmps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setBlowerAmps = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 return_temperature = 7;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getReturnTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setReturnTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 supply_temperature = 8;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getSupplyTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setSupplyTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 compressor_amps = 9;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getCompressorAmps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setCompressorAmps = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 condensing_fan_amps = 10;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getCondensingFanAmps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setCondensingFanAmps = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 compressor_capacitor = 11;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getCompressorCapacitor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setCompressorCapacitor = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 condenser_fan_capacitor = 12;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getCondenserFanCapacitor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setCondenserFanCapacitor = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 suction_pressure = 13;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getSuctionPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setSuctionPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 head_pressure = 14;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getHeadPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setHeadPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 subcool = 15;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getSubcool = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setSubcool = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 superheat = 16;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getSuperheat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setSuperheat = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 discharge_temperature = 17;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getDischargeTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setDischargeTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 gas_type = 18;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getGasType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setGasType = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 burner = 19;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getBurner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setBurner = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 heat_exchanger = 20;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getHeatExchanger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setHeatExchanger = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 thermostat = 21;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getThermostat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setThermostat = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 plateform = 22;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getPlateform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setPlateform = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 float_switch = 23;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getFloatSwitch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setFloatSwitch = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 evaporator_coil = 24;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getEvaporatorCoil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setEvaporatorCoil = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 condenser_coil = 25;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getCondenserCoil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setCondenserCoil = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int32 hurricane_pad = 26;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getHurricanePad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setHurricanePad = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int32 lineset = 27;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getLineset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setLineset = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional int32 drain_line = 28;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getDrainLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setDrainLine = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional int32 pool_supply_temp = 29;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getPoolSupplyTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setPoolSupplyTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional int32 pool_return_temp = 30;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getPoolReturnTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setPoolReturnTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional int32 ambient_air_temp = 31;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getAmbientAirTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setAmbientAirTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional int32 return_wb = 32;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getReturnWb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setReturnWb = function(value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional int32 return_db = 33;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getReturnDb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setReturnDb = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional int32 evap_td = 34;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getEvapTd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setEvapTd = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional int32 coil_static_drop = 35;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getCoilStaticDrop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setCoilStaticDrop = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional int32 tesp = 36;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getTesp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setTesp = function(value) {
  return jspb.Message.setProto3IntField(this, 36, value);
};


/**
 * optional int32 gas_pressure_in = 37;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getGasPressureIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 37, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setGasPressureIn = function(value) {
  return jspb.Message.setProto3IntField(this, 37, value);
};


/**
 * optional int32 gas_pressure_out = 38;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getGasPressureOut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setGasPressureOut = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional int32 ll_temp_drop = 39;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getLlTempDrop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setLlTempDrop = function(value) {
  return jspb.Message.setProto3IntField(this, 39, value);
};


/**
 * optional int32 sl_temp_drop = 40;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getSlTempDrop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setSlTempDrop = function(value) {
  return jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * repeated string field_mask = 41;
 * @return {!Array<string>}
 */
proto.SystemReadingsType.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 41));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 41, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 41, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 42;
 * @return {number}
 */
proto.SystemReadingsType.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsType} returns this
 */
proto.SystemReadingsType.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SystemReadingsTypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SystemReadingsTypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.SystemReadingsTypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SystemReadingsTypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemReadingsTypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.SystemReadingsType.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SystemReadingsTypeList}
 */
proto.SystemReadingsTypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SystemReadingsTypeList;
  return proto.SystemReadingsTypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SystemReadingsTypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SystemReadingsTypeList}
 */
proto.SystemReadingsTypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SystemReadingsType;
      reader.readMessage(value,proto.SystemReadingsType.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SystemReadingsTypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SystemReadingsTypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SystemReadingsTypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemReadingsTypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SystemReadingsType.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated SystemReadingsType results = 1;
 * @return {!Array<!proto.SystemReadingsType>}
 */
proto.SystemReadingsTypeList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.SystemReadingsType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SystemReadingsType, 1));
};


/**
 * @param {!Array<!proto.SystemReadingsType>} value
 * @return {!proto.SystemReadingsTypeList} returns this
*/
proto.SystemReadingsTypeList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SystemReadingsType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SystemReadingsType}
 */
proto.SystemReadingsTypeList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SystemReadingsType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SystemReadingsTypeList} returns this
 */
proto.SystemReadingsTypeList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.SystemReadingsTypeList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SystemReadingsTypeList} returns this
 */
proto.SystemReadingsTypeList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
