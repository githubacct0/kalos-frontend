// source: invoice.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Invoice', null, global);
goog.exportSymbol('proto.InvoiceList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Invoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Invoice.repeatedFields_, null);
};
goog.inherits(proto.Invoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Invoice.displayName = 'proto.Invoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvoiceList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InvoiceList.repeatedFields_, null);
};
goog.inherits(proto.InvoiceList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InvoiceList.displayName = 'proto.InvoiceList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Invoice.repeatedFields_ = [53];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Invoice.prototype.toObject = function(opt_includeInstance) {
  return proto.Invoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Invoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Invoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    propertyId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    systemType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    systemType2: jspb.Message.getFieldWithDefault(msg, 7, ""),
    compressorAmps: jspb.Message.getFieldWithDefault(msg, 8, ""),
    model: jspb.Message.getFieldWithDefault(msg, 9, ""),
    brand: jspb.Message.getFieldWithDefault(msg, 10, ""),
    condensingFanAmps: jspb.Message.getFieldWithDefault(msg, 11, ""),
    serial: jspb.Message.getFieldWithDefault(msg, 12, ""),
    startDate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    suctionPressure: jspb.Message.getFieldWithDefault(msg, 14, ""),
    headPressure: jspb.Message.getFieldWithDefault(msg, 15, ""),
    model2: jspb.Message.getFieldWithDefault(msg, 16, ""),
    brand2: jspb.Message.getFieldWithDefault(msg, 17, ""),
    returnTemperature: jspb.Message.getFieldWithDefault(msg, 18, ""),
    serial2: jspb.Message.getFieldWithDefault(msg, 19, ""),
    startDate2: jspb.Message.getFieldWithDefault(msg, 20, ""),
    supplyTemperature: jspb.Message.getFieldWithDefault(msg, 21, ""),
    tstatType: jspb.Message.getFieldWithDefault(msg, 22, ""),
    tstatBrand: jspb.Message.getFieldWithDefault(msg, 23, ""),
    subcool: jspb.Message.getFieldWithDefault(msg, 24, ""),
    filterSizes: jspb.Message.getFieldWithDefault(msg, 25, ""),
    superheat: jspb.Message.getFieldWithDefault(msg, 26, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 27, ""),
    properties: jspb.Message.getFieldWithDefault(msg, 28, ""),
    terms: jspb.Message.getFieldWithDefault(msg, 29, ""),
    servicesperformedrow1: jspb.Message.getFieldWithDefault(msg, 30, ""),
    totalamountrow1: jspb.Message.getFieldWithDefault(msg, 31, ""),
    servicesperformedrow2: jspb.Message.getFieldWithDefault(msg, 32, ""),
    totalamountrow2: jspb.Message.getFieldWithDefault(msg, 33, ""),
    servicesperformedrow3: jspb.Message.getFieldWithDefault(msg, 34, ""),
    totalamountrow3: jspb.Message.getFieldWithDefault(msg, 35, ""),
    servicesperformedrow4: jspb.Message.getFieldWithDefault(msg, 36, ""),
    totalamountrow4: jspb.Message.getFieldWithDefault(msg, 37, ""),
    discount: jspb.Message.getFieldWithDefault(msg, 38, ""),
    discountcost: jspb.Message.getFieldWithDefault(msg, 39, ""),
    totalamounttotal: jspb.Message.getFieldWithDefault(msg, 40, ""),
    credit: jspb.Message.getFieldWithDefault(msg, 41, 0),
    cash: jspb.Message.getFieldWithDefault(msg, 42, 0),
    byCheck: jspb.Message.getFieldWithDefault(msg, 43, 0),
    billing: jspb.Message.getFieldWithDefault(msg, 44, 0),
    paymentYes: jspb.Message.getFieldWithDefault(msg, 45, 0),
    paymentNo: jspb.Message.getFieldWithDefault(msg, 46, 0),
    serviceItem: jspb.Message.getFieldWithDefault(msg, 47, ""),
    logPaymentType: jspb.Message.getFieldWithDefault(msg, 48, ""),
    logPaymentStatus: jspb.Message.getFieldWithDefault(msg, 49, ""),
    propertyBilling: jspb.Message.getFieldWithDefault(msg, 50, 0),
    materialUsed: jspb.Message.getFieldWithDefault(msg, 51, ""),
    materialTotal: jspb.Message.getFieldWithDefault(msg, 52, ""),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 53)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 54, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Invoice}
 */
proto.Invoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Invoice;
  return proto.Invoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Invoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Invoice}
 */
proto.Invoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemType2(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompressorAmps(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondensingFanAmps(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuctionPressure(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadPressure(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel2(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand2(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnTemperature(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial2(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate2(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupplyTemperature(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setTstatType(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setTstatBrand(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubcool(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterSizes(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuperheat(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperties(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerms(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicesperformedrow1(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamountrow1(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicesperformedrow2(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamountrow2(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicesperformedrow3(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamountrow3(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicesperformedrow4(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamountrow4(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiscount(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiscountcost(value);
      break;
    case 40:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamounttotal(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCredit(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCash(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setByCheck(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBilling(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaymentYes(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaymentNo(value);
      break;
    case 47:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceItem(value);
      break;
    case 48:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogPaymentType(value);
      break;
    case 49:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogPaymentStatus(value);
      break;
    case 50:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyBilling(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterialUsed(value);
      break;
    case 52:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterialTotal(value);
      break;
    case 53:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 54:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Invoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Invoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Invoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Invoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContractId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSystemType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSystemType2();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompressorAmps();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCondensingFanAmps();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getSuctionPressure();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getHeadPressure();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getModel2();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getBrand2();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getReturnTemperature();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getSerial2();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getStartDate2();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getSupplyTemperature();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getTstatType();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getTstatBrand();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getSubcool();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getFilterSizes();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getSuperheat();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getProperties();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getTerms();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getServicesperformedrow1();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getTotalamountrow1();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getServicesperformedrow2();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getTotalamountrow2();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getServicesperformedrow3();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
  f = message.getTotalamountrow3();
  if (f.length > 0) {
    writer.writeString(
      35,
      f
    );
  }
  f = message.getServicesperformedrow4();
  if (f.length > 0) {
    writer.writeString(
      36,
      f
    );
  }
  f = message.getTotalamountrow4();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getDiscount();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getDiscountcost();
  if (f.length > 0) {
    writer.writeString(
      39,
      f
    );
  }
  f = message.getTotalamounttotal();
  if (f.length > 0) {
    writer.writeString(
      40,
      f
    );
  }
  f = message.getCredit();
  if (f !== 0) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = message.getCash();
  if (f !== 0) {
    writer.writeInt32(
      42,
      f
    );
  }
  f = message.getByCheck();
  if (f !== 0) {
    writer.writeInt32(
      43,
      f
    );
  }
  f = message.getBilling();
  if (f !== 0) {
    writer.writeInt32(
      44,
      f
    );
  }
  f = message.getPaymentYes();
  if (f !== 0) {
    writer.writeInt32(
      45,
      f
    );
  }
  f = message.getPaymentNo();
  if (f !== 0) {
    writer.writeInt32(
      46,
      f
    );
  }
  f = message.getServiceItem();
  if (f.length > 0) {
    writer.writeString(
      47,
      f
    );
  }
  f = message.getLogPaymentType();
  if (f.length > 0) {
    writer.writeString(
      48,
      f
    );
  }
  f = message.getLogPaymentStatus();
  if (f.length > 0) {
    writer.writeString(
      49,
      f
    );
  }
  f = message.getPropertyBilling();
  if (f !== 0) {
    writer.writeInt32(
      50,
      f
    );
  }
  f = message.getMaterialUsed();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
  f = message.getMaterialTotal();
  if (f.length > 0) {
    writer.writeString(
      52,
      f
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      53,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      54,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Invoice.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 event_id = 2;
 * @return {number}
 */
proto.Invoice.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 contract_id = 3;
 * @return {number}
 */
proto.Invoice.prototype.getContractId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setContractId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 user_id = 4;
 * @return {number}
 */
proto.Invoice.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 property_id = 5;
 * @return {number}
 */
proto.Invoice.prototype.getPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string system_type = 6;
 * @return {string}
 */
proto.Invoice.prototype.getSystemType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSystemType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string system_type_2 = 7;
 * @return {string}
 */
proto.Invoice.prototype.getSystemType2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSystemType2 = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string compressor_amps = 8;
 * @return {string}
 */
proto.Invoice.prototype.getCompressorAmps = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setCompressorAmps = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string model = 9;
 * @return {string}
 */
proto.Invoice.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string brand = 10;
 * @return {string}
 */
proto.Invoice.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string condensing_fan_amps = 11;
 * @return {string}
 */
proto.Invoice.prototype.getCondensingFanAmps = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setCondensingFanAmps = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string serial = 12;
 * @return {string}
 */
proto.Invoice.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSerial = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string start_date = 13;
 * @return {string}
 */
proto.Invoice.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string suction_pressure = 14;
 * @return {string}
 */
proto.Invoice.prototype.getSuctionPressure = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSuctionPressure = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string head_pressure = 15;
 * @return {string}
 */
proto.Invoice.prototype.getHeadPressure = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setHeadPressure = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string model_2 = 16;
 * @return {string}
 */
proto.Invoice.prototype.getModel2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setModel2 = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string brand_2 = 17;
 * @return {string}
 */
proto.Invoice.prototype.getBrand2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setBrand2 = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string return_temperature = 18;
 * @return {string}
 */
proto.Invoice.prototype.getReturnTemperature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setReturnTemperature = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string serial_2 = 19;
 * @return {string}
 */
proto.Invoice.prototype.getSerial2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSerial2 = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string start_date_2 = 20;
 * @return {string}
 */
proto.Invoice.prototype.getStartDate2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setStartDate2 = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string supply_temperature = 21;
 * @return {string}
 */
proto.Invoice.prototype.getSupplyTemperature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSupplyTemperature = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string tstat_type = 22;
 * @return {string}
 */
proto.Invoice.prototype.getTstatType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTstatType = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string tstat_brand = 23;
 * @return {string}
 */
proto.Invoice.prototype.getTstatBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTstatBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string subcool = 24;
 * @return {string}
 */
proto.Invoice.prototype.getSubcool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSubcool = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string filter_sizes = 25;
 * @return {string}
 */
proto.Invoice.prototype.getFilterSizes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setFilterSizes = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional string superheat = 26;
 * @return {string}
 */
proto.Invoice.prototype.getSuperheat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setSuperheat = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional string notes = 27;
 * @return {string}
 */
proto.Invoice.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string properties = 28;
 * @return {string}
 */
proto.Invoice.prototype.getProperties = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setProperties = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string terms = 29;
 * @return {string}
 */
proto.Invoice.prototype.getTerms = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTerms = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string servicesperformedrow1 = 30;
 * @return {string}
 */
proto.Invoice.prototype.getServicesperformedrow1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setServicesperformedrow1 = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string totalamountrow1 = 31;
 * @return {string}
 */
proto.Invoice.prototype.getTotalamountrow1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTotalamountrow1 = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string servicesperformedrow2 = 32;
 * @return {string}
 */
proto.Invoice.prototype.getServicesperformedrow2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setServicesperformedrow2 = function(value) {
  return jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional string totalamountrow2 = 33;
 * @return {string}
 */
proto.Invoice.prototype.getTotalamountrow2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTotalamountrow2 = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional string servicesperformedrow3 = 34;
 * @return {string}
 */
proto.Invoice.prototype.getServicesperformedrow3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setServicesperformedrow3 = function(value) {
  return jspb.Message.setProto3StringField(this, 34, value);
};


/**
 * optional string totalamountrow3 = 35;
 * @return {string}
 */
proto.Invoice.prototype.getTotalamountrow3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTotalamountrow3 = function(value) {
  return jspb.Message.setProto3StringField(this, 35, value);
};


/**
 * optional string servicesperformedrow4 = 36;
 * @return {string}
 */
proto.Invoice.prototype.getServicesperformedrow4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setServicesperformedrow4 = function(value) {
  return jspb.Message.setProto3StringField(this, 36, value);
};


/**
 * optional string totalamountrow4 = 37;
 * @return {string}
 */
proto.Invoice.prototype.getTotalamountrow4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTotalamountrow4 = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional string discount = 38;
 * @return {string}
 */
proto.Invoice.prototype.getDiscount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string discountcost = 39;
 * @return {string}
 */
proto.Invoice.prototype.getDiscountcost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setDiscountcost = function(value) {
  return jspb.Message.setProto3StringField(this, 39, value);
};


/**
 * optional string totalamounttotal = 40;
 * @return {string}
 */
proto.Invoice.prototype.getTotalamounttotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setTotalamounttotal = function(value) {
  return jspb.Message.setProto3StringField(this, 40, value);
};


/**
 * optional int32 credit = 41;
 * @return {number}
 */
proto.Invoice.prototype.getCredit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setCredit = function(value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional int32 cash = 42;
 * @return {number}
 */
proto.Invoice.prototype.getCash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setCash = function(value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional int32 by_check = 43;
 * @return {number}
 */
proto.Invoice.prototype.getByCheck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setByCheck = function(value) {
  return jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional int32 billing = 44;
 * @return {number}
 */
proto.Invoice.prototype.getBilling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setBilling = function(value) {
  return jspb.Message.setProto3IntField(this, 44, value);
};


/**
 * optional int32 payment_yes = 45;
 * @return {number}
 */
proto.Invoice.prototype.getPaymentYes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 45, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setPaymentYes = function(value) {
  return jspb.Message.setProto3IntField(this, 45, value);
};


/**
 * optional int32 payment_no = 46;
 * @return {number}
 */
proto.Invoice.prototype.getPaymentNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setPaymentNo = function(value) {
  return jspb.Message.setProto3IntField(this, 46, value);
};


/**
 * optional string service_item = 47;
 * @return {string}
 */
proto.Invoice.prototype.getServiceItem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 47, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setServiceItem = function(value) {
  return jspb.Message.setProto3StringField(this, 47, value);
};


/**
 * optional string log_payment_type = 48;
 * @return {string}
 */
proto.Invoice.prototype.getLogPaymentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 48, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setLogPaymentType = function(value) {
  return jspb.Message.setProto3StringField(this, 48, value);
};


/**
 * optional string log_payment_status = 49;
 * @return {string}
 */
proto.Invoice.prototype.getLogPaymentStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 49, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setLogPaymentStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 49, value);
};


/**
 * optional int32 property_billing = 50;
 * @return {number}
 */
proto.Invoice.prototype.getPropertyBilling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setPropertyBilling = function(value) {
  return jspb.Message.setProto3IntField(this, 50, value);
};


/**
 * optional string material_used = 51;
 * @return {string}
 */
proto.Invoice.prototype.getMaterialUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setMaterialUsed = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};


/**
 * optional string material_total = 52;
 * @return {string}
 */
proto.Invoice.prototype.getMaterialTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 52, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setMaterialTotal = function(value) {
  return jspb.Message.setProto3StringField(this, 52, value);
};


/**
 * repeated string field_mask = 53;
 * @return {!Array<string>}
 */
proto.Invoice.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 53));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 53, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 53, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 54;
 * @return {number}
 */
proto.Invoice.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 54, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invoice} returns this
 */
proto.Invoice.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 54, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InvoiceList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvoiceList.prototype.toObject = function(opt_includeInstance) {
  return proto.InvoiceList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvoiceList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvoiceList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.Invoice.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvoiceList}
 */
proto.InvoiceList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvoiceList;
  return proto.InvoiceList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvoiceList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvoiceList}
 */
proto.InvoiceList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Invoice;
      reader.readMessage(value,proto.Invoice.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvoiceList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvoiceList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvoiceList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvoiceList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Invoice.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Invoice results = 1;
 * @return {!Array<!proto.Invoice>}
 */
proto.InvoiceList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.Invoice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Invoice, 1));
};


/**
 * @param {!Array<!proto.Invoice>} value
 * @return {!proto.InvoiceList} returns this
*/
proto.InvoiceList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Invoice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Invoice}
 */
proto.InvoiceList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Invoice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InvoiceList} returns this
 */
proto.InvoiceList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.InvoiceList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.InvoiceList} returns this
 */
proto.InvoiceList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
