// source: reports.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.PromptPaymentReport', null, global);
goog.exportSymbol('proto.PromptPaymentReportLine', null, global);
goog.exportSymbol('proto.ReceiptJournalReport', null, global);
goog.exportSymbol('proto.ReceiptJournalReportLine', null, global);
goog.exportSymbol('proto.SpiffReport', null, global);
goog.exportSymbol('proto.SpiffReportLine', null, global);
goog.exportSymbol('proto.TimeoffReport', null, global);
goog.exportSymbol('proto.TimeoffReportLine', null, global);
goog.exportSymbol('proto.TimeoffReportRequest', null, global);
goog.exportSymbol('proto.TransactionDumpReport', null, global);
goog.exportSymbol('proto.TransactionReportLine', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpiffReportLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpiffReportLine.repeatedFields_, null);
};
goog.inherits(proto.SpiffReportLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpiffReportLine.displayName = 'proto.SpiffReportLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpiffReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpiffReport.repeatedFields_, null);
};
goog.inherits(proto.SpiffReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpiffReport.displayName = 'proto.SpiffReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PromptPaymentReportLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PromptPaymentReportLine.repeatedFields_, null);
};
goog.inherits(proto.PromptPaymentReportLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PromptPaymentReportLine.displayName = 'proto.PromptPaymentReportLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionReportLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionReportLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionReportLine.displayName = 'proto.TransactionReportLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeoffReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimeoffReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimeoffReportRequest.displayName = 'proto.TimeoffReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeoffReportLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimeoffReportLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimeoffReportLine.displayName = 'proto.TimeoffReportLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReceiptJournalReportLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReceiptJournalReportLine.repeatedFields_, null);
};
goog.inherits(proto.ReceiptJournalReportLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReceiptJournalReportLine.displayName = 'proto.ReceiptJournalReportLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PromptPaymentReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PromptPaymentReport.repeatedFields_, null);
};
goog.inherits(proto.PromptPaymentReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PromptPaymentReport.displayName = 'proto.PromptPaymentReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReceiptJournalReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReceiptJournalReport.repeatedFields_, null);
};
goog.inherits(proto.ReceiptJournalReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReceiptJournalReport.displayName = 'proto.ReceiptJournalReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionDumpReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransactionDumpReport.repeatedFields_, null);
};
goog.inherits(proto.TransactionDumpReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionDumpReport.displayName = 'proto.TransactionDumpReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeoffReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimeoffReport.repeatedFields_, null);
};
goog.inherits(proto.TimeoffReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimeoffReport.displayName = 'proto.TimeoffReport';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpiffReportLine.repeatedFields_ = [20,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpiffReportLine.prototype.toObject = function(opt_includeInstance) {
  return proto.SpiffReportLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpiffReportLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffReportLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    employeeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contractId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    typeId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    statusId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    category: jspb.Message.getFieldWithDefault(msg, 7, ""),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, ""),
    payYear: jspb.Message.getFieldWithDefault(msg, 11, 0),
    payMonth: jspb.Message.getFieldWithDefault(msg, 12, 0),
    payWeek: jspb.Message.getFieldWithDefault(msg, 13, 0),
    isPaidWeekly: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isPaidMonthly: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    employeeName: jspb.Message.getFieldWithDefault(msg, 21, ""),
    address: jspb.Message.getFieldWithDefault(msg, 22, ""),
    jobNumber: jspb.Message.getFieldWithDefault(msg, 23, ""),
    ext: jspb.Message.getFieldWithDefault(msg, 24, ""),
    orderBy: jspb.Message.getFieldWithDefault(msg, 17, ""),
    orderDir: jspb.Message.getFieldWithDefault(msg, 18, ""),
    dateTargetList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpiffReportLine}
 */
proto.SpiffReportLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpiffReportLine;
  return proto.SpiffReportLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpiffReportLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpiffReportLine}
 */
proto.SpiffReportLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmployeeId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayYear(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayMonth(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayWeek(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPaidWeekly(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPaidMonthly(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmployeeName(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobNumber(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDir(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateTarget(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpiffReportLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpiffReportLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpiffReportLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffReportLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEmployeeId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getContractId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTypeId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getStatusId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPayYear();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPayMonth();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getPayWeek();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getIsPaidWeekly();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsPaidMonthly();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getEmployeeName();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getJobNumber();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getExt();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getOrderDir();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getDateTargetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 employee_id = 2;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getEmployeeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setEmployeeId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 event_id = 3;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 contract_id = 4;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getContractId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setContractId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 type_id = 5;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 status_id = 6;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getStatusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setStatusId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string category = 7;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double amount = 9;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string timestamp = 10;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 pay_year = 11;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getPayYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setPayYear = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 pay_month = 12;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getPayMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setPayMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 pay_week = 13;
 * @return {number}
 */
proto.SpiffReportLine.prototype.getPayWeek = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setPayWeek = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool is_paid_weekly = 14;
 * @return {boolean}
 */
proto.SpiffReportLine.prototype.getIsPaidWeekly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setIsPaidWeekly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool is_paid_monthly = 15;
 * @return {boolean}
 */
proto.SpiffReportLine.prototype.getIsPaidMonthly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setIsPaidMonthly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool is_active = 16;
 * @return {boolean}
 */
proto.SpiffReportLine.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional string employee_name = 21;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getEmployeeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setEmployeeName = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string address = 22;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string job_number = 23;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getJobNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setJobNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string ext = 24;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setExt = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string order_by = 17;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string order_dir = 18;
 * @return {string}
 */
proto.SpiffReportLine.prototype.getOrderDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setOrderDir = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated string date_target = 20;
 * @return {!Array<string>}
 */
proto.SpiffReportLine.prototype.getDateTargetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setDateTargetList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.addDateTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.clearDateTargetList = function() {
  return this.setDateTargetList([]);
};


/**
 * repeated string date_range = 19;
 * @return {!Array<string>}
 */
proto.SpiffReportLine.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpiffReportLine} returns this
 */
proto.SpiffReportLine.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpiffReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpiffReport.prototype.toObject = function(opt_includeInstance) {
  return proto.SpiffReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpiffReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.SpiffReportLine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpiffReport}
 */
proto.SpiffReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpiffReport;
  return proto.SpiffReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpiffReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpiffReport}
 */
proto.SpiffReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SpiffReportLine;
      reader.readMessage(value,proto.SpiffReportLine.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpiffReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpiffReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpiffReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SpiffReportLine.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SpiffReportLine data = 1;
 * @return {!Array<!proto.SpiffReportLine>}
 */
proto.SpiffReport.prototype.getDataList = function() {
  return /** @type{!Array<!proto.SpiffReportLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpiffReportLine, 1));
};


/**
 * @param {!Array<!proto.SpiffReportLine>} value
 * @return {!proto.SpiffReport} returns this
*/
proto.SpiffReport.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SpiffReportLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpiffReportLine}
 */
proto.SpiffReport.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SpiffReportLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpiffReport} returns this
 */
proto.SpiffReport.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PromptPaymentReportLine.repeatedFields_ = [20,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PromptPaymentReportLine.prototype.toObject = function(opt_includeInstance) {
  return proto.PromptPaymentReportLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PromptPaymentReportLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PromptPaymentReportLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    billingdate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dueDate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paymentDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    reportUntil: jspb.Message.getFieldWithDefault(msg, 5, ""),
    daysToPay: jspb.Message.getFieldWithDefault(msg, 6, 0),
    jobNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    userBusinessName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 10, ""),
    payable: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    payed: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    paymentTerms: jspb.Message.getFieldWithDefault(msg, 13, 0),
    eligibleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    possibleAward: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    rebateAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    rebateDate: jspb.Message.getFieldWithDefault(msg, 17, ""),
    orderBy: jspb.Message.getFieldWithDefault(msg, 18, ""),
    orderDir: jspb.Message.getFieldWithDefault(msg, 19, ""),
    dateTargetList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PromptPaymentReportLine}
 */
proto.PromptPaymentReportLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PromptPaymentReportLine;
  return proto.PromptPaymentReportLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PromptPaymentReportLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PromptPaymentReportLine}
 */
proto.PromptPaymentReportLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingdate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDueDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportUntil(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDaysToPay(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobNumber(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserBusinessName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPayable(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPayed(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaymentTerms(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEligibleRate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPossibleAward(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRebateAmount(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setRebateDate(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDir(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateTarget(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PromptPaymentReportLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PromptPaymentReportLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PromptPaymentReportLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PromptPaymentReportLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBillingdate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDueDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaymentDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReportUntil();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDaysToPay();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getJobNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getUserBusinessName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPayable();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPayed();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getPaymentTerms();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getEligibleRate();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getPossibleAward();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getRebateAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getRebateDate();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getOrderDir();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getDateTargetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      21,
      f
    );
  }
};


/**
 * optional int32 event_id = 1;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string billingDate = 2;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getBillingdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setBillingdate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string due_date = 3;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getDueDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setDueDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string payment_date = 4;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getPaymentDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setPaymentDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string report_until = 5;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getReportUntil = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setReportUntil = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 days_to_pay = 6;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getDaysToPay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setDaysToPay = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string job_number = 7;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getJobNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setJobNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 user_id = 8;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string user_business_name = 9;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getUserBusinessName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setUserBusinessName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string user_email = 10;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional double payable = 11;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getPayable = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setPayable = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double payed = 12;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getPayed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setPayed = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional int32 payment_terms = 13;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getPaymentTerms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setPaymentTerms = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional double eligible_rate = 14;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getEligibleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setEligibleRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double possible_award = 15;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getPossibleAward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setPossibleAward = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double rebate_amount = 16;
 * @return {number}
 */
proto.PromptPaymentReportLine.prototype.getRebateAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setRebateAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional string rebate_date = 17;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getRebateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setRebateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string order_by = 18;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string order_dir = 19;
 * @return {string}
 */
proto.PromptPaymentReportLine.prototype.getOrderDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setOrderDir = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * repeated string date_target = 20;
 * @return {!Array<string>}
 */
proto.PromptPaymentReportLine.prototype.getDateTargetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setDateTargetList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.addDateTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.clearDateTargetList = function() {
  return this.setDateTargetList([]);
};


/**
 * repeated string date_range = 21;
 * @return {!Array<string>}
 */
proto.PromptPaymentReportLine.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PromptPaymentReportLine} returns this
 */
proto.PromptPaymentReportLine.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionReportLine.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionReportLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionReportLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionReportLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artificialId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jobNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    zoning: jspb.Message.getFieldWithDefault(msg, 4, ""),
    jobType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    subType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    classCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    department: jspb.Message.getFieldWithDefault(msg, 8, ""),
    category: jspb.Message.getFieldWithDefault(msg, 9, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 10, ""),
    holderName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    transactionTimestamp: jspb.Message.getFieldWithDefault(msg, 12, ""),
    postedTimestamp: jspb.Message.getFieldWithDefault(msg, 13, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 14, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 15, ""),
    year: jspb.Message.getFieldWithDefault(msg, 16, ""),
    pageNumber: jspb.Message.getFieldWithDefault(msg, 17, 0),
    withoutLimit: jspb.Message.getBooleanFieldWithDefault(msg, 18, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionReportLine}
 */
proto.TransactionReportLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionReportLine;
  return proto.TransactionReportLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionReportLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionReportLine}
 */
proto.TransactionReportLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtificialId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setZoning(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartment(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setHolderName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionTimestamp(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostedTimestamp(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setYear(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionReportLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionReportLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionReportLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionReportLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getArtificialId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJobNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getZoning();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getJobType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSubType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getClassCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDepartment();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getHolderName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTransactionTimestamp();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPostedTimestamp();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getYear();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getWithoutLimit();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
};


/**
 * optional int32 transaction_id = 1;
 * @return {number}
 */
proto.TransactionReportLine.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string artificial_id = 2;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getArtificialId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setArtificialId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string job_number = 3;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getJobNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setJobNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string zoning = 4;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getZoning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setZoning = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string job_type = 5;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getJobType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setJobType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sub_type = 6;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getSubType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setSubType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string class_code = 7;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getClassCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setClassCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string department = 8;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getDepartment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setDepartment = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string category = 9;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string vendor = 10;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string holder_name = 11;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getHolderName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setHolderName = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string transaction_timestamp = 12;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getTransactionTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setTransactionTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string posted_timestamp = 13;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getPostedTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setPostedTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string amount = 14;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string notes = 15;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string year = 16;
 * @return {string}
 */
proto.TransactionReportLine.prototype.getYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setYear = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int32 page_number = 17;
 * @return {number}
 */
proto.TransactionReportLine.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool without_limit = 18;
 * @return {boolean}
 */
proto.TransactionReportLine.prototype.getWithoutLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TransactionReportLine} returns this
 */
proto.TransactionReportLine.prototype.setWithoutLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeoffReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeoffReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeoffReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoffReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    yearShift: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeoffReportRequest}
 */
proto.TimeoffReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeoffReportRequest;
  return proto.TimeoffReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeoffReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeoffReportRequest}
 */
proto.TimeoffReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYearShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeoffReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeoffReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeoffReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoffReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYearShift();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 year_shift = 1;
 * @return {number}
 */
proto.TimeoffReportRequest.prototype.getYearShift = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportRequest} returns this
 */
proto.TimeoffReportRequest.prototype.setYearShift = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeoffReportLine.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeoffReportLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeoffReportLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoffReportLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    employeeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userFirstname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userLastname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hireDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    annualHoursPto: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    hireDateDiscretionary: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    hireDateMandatory: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    hireDatePto: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    hireDatePaidDowntime: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    annualDiscretionary: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    annualMandatory: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    annualPto: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    annualPaidDowntime: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeoffReportLine}
 */
proto.TimeoffReportLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeoffReportLine;
  return proto.TimeoffReportLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeoffReportLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeoffReportLine}
 */
proto.TimeoffReportLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmployeeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHireDate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnnualHoursPto(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHireDateDiscretionary(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHireDateMandatory(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHireDatePto(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHireDatePaidDowntime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnnualDiscretionary(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnnualMandatory(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnnualPto(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnnualPaidDowntime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeoffReportLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeoffReportLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeoffReportLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoffReportLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmployeeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUserFirstname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserLastname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHireDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAnnualHoursPto();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getHireDateDiscretionary();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getHireDateMandatory();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getHireDatePto();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getHireDatePaidDowntime();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getAnnualDiscretionary();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getAnnualMandatory();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getAnnualPto();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getAnnualPaidDowntime();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional int32 employee_id = 1;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getEmployeeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setEmployeeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_firstname = 2;
 * @return {string}
 */
proto.TimeoffReportLine.prototype.getUserFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setUserFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_lastname = 3;
 * @return {string}
 */
proto.TimeoffReportLine.prototype.getUserLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setUserLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string hire_date = 4;
 * @return {string}
 */
proto.TimeoffReportLine.prototype.getHireDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setHireDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double annual_hours_pto = 5;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getAnnualHoursPto = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setAnnualHoursPto = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double hire_date_discretionary = 6;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getHireDateDiscretionary = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setHireDateDiscretionary = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double hire_date_mandatory = 7;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getHireDateMandatory = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setHireDateMandatory = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double hire_date_pto = 8;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getHireDatePto = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setHireDatePto = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double hire_date_paid_downtime = 9;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getHireDatePaidDowntime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setHireDatePaidDowntime = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double annual_discretionary = 10;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getAnnualDiscretionary = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setAnnualDiscretionary = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double annual_mandatory = 11;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getAnnualMandatory = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setAnnualMandatory = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double annual_pto = 12;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getAnnualPto = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setAnnualPto = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double annual_paid_downtime = 13;
 * @return {number}
 */
proto.TimeoffReportLine.prototype.getAnnualPaidDowntime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReportLine} returns this
 */
proto.TimeoffReportLine.prototype.setAnnualPaidDowntime = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReceiptJournalReportLine.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReceiptJournalReportLine.prototype.toObject = function(opt_includeInstance) {
  return proto.ReceiptJournalReportLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReceiptJournalReportLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiptJournalReportLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paymentType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amountCollected: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    srDatetime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    departmentId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    withoutLimit: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    pageNumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
    orderBy: jspb.Message.getFieldWithDefault(msg, 8, ""),
    orderDir: jspb.Message.getFieldWithDefault(msg, 9, ""),
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    dateTarget: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReceiptJournalReportLine}
 */
proto.ReceiptJournalReportLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReceiptJournalReportLine;
  return proto.ReceiptJournalReportLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReceiptJournalReportLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReceiptJournalReportLine}
 */
proto.ReceiptJournalReportLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmountCollected(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrDatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDir(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReceiptJournalReportLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReceiptJournalReportLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReceiptJournalReportLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiptJournalReportLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPaymentType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmountCollected();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSrDatetime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDepartmentId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWithoutLimit();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOrderDir();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getDateTarget();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional int32 event_id = 1;
 * @return {number}
 */
proto.ReceiptJournalReportLine.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string payment_type = 2;
 * @return {string}
 */
proto.ReceiptJournalReportLine.prototype.getPaymentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setPaymentType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double amount_collected = 3;
 * @return {number}
 */
proto.ReceiptJournalReportLine.prototype.getAmountCollected = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setAmountCollected = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string sr_datetime = 4;
 * @return {string}
 */
proto.ReceiptJournalReportLine.prototype.getSrDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setSrDatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 department_id = 5;
 * @return {number}
 */
proto.ReceiptJournalReportLine.prototype.getDepartmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setDepartmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool without_limit = 6;
 * @return {boolean}
 */
proto.ReceiptJournalReportLine.prototype.getWithoutLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setWithoutLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 page_number = 7;
 * @return {number}
 */
proto.ReceiptJournalReportLine.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string order_by = 8;
 * @return {string}
 */
proto.ReceiptJournalReportLine.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string order_dir = 9;
 * @return {string}
 */
proto.ReceiptJournalReportLine.prototype.getOrderDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setOrderDir = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string date_range = 10;
 * @return {!Array<string>}
 */
proto.ReceiptJournalReportLine.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};


/**
 * optional string date_target = 11;
 * @return {string}
 */
proto.ReceiptJournalReportLine.prototype.getDateTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReceiptJournalReportLine} returns this
 */
proto.ReceiptJournalReportLine.prototype.setDateTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PromptPaymentReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PromptPaymentReport.prototype.toObject = function(opt_includeInstance) {
  return proto.PromptPaymentReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PromptPaymentReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PromptPaymentReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.PromptPaymentReportLine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PromptPaymentReport}
 */
proto.PromptPaymentReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PromptPaymentReport;
  return proto.PromptPaymentReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PromptPaymentReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PromptPaymentReport}
 */
proto.PromptPaymentReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PromptPaymentReportLine;
      reader.readMessage(value,proto.PromptPaymentReportLine.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PromptPaymentReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PromptPaymentReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PromptPaymentReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PromptPaymentReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PromptPaymentReportLine.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PromptPaymentReportLine data = 1;
 * @return {!Array<!proto.PromptPaymentReportLine>}
 */
proto.PromptPaymentReport.prototype.getDataList = function() {
  return /** @type{!Array<!proto.PromptPaymentReportLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PromptPaymentReportLine, 1));
};


/**
 * @param {!Array<!proto.PromptPaymentReportLine>} value
 * @return {!proto.PromptPaymentReport} returns this
*/
proto.PromptPaymentReport.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PromptPaymentReportLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PromptPaymentReportLine}
 */
proto.PromptPaymentReport.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PromptPaymentReportLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PromptPaymentReport} returns this
 */
proto.PromptPaymentReport.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReceiptJournalReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReceiptJournalReport.prototype.toObject = function(opt_includeInstance) {
  return proto.ReceiptJournalReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReceiptJournalReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiptJournalReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.ReceiptJournalReportLine.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReceiptJournalReport}
 */
proto.ReceiptJournalReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReceiptJournalReport;
  return proto.ReceiptJournalReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReceiptJournalReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReceiptJournalReport}
 */
proto.ReceiptJournalReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReceiptJournalReportLine;
      reader.readMessage(value,proto.ReceiptJournalReportLine.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReceiptJournalReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReceiptJournalReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReceiptJournalReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiptJournalReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ReceiptJournalReportLine.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated ReceiptJournalReportLine data = 1;
 * @return {!Array<!proto.ReceiptJournalReportLine>}
 */
proto.ReceiptJournalReport.prototype.getDataList = function() {
  return /** @type{!Array<!proto.ReceiptJournalReportLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReceiptJournalReportLine, 1));
};


/**
 * @param {!Array<!proto.ReceiptJournalReportLine>} value
 * @return {!proto.ReceiptJournalReport} returns this
*/
proto.ReceiptJournalReport.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ReceiptJournalReportLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReceiptJournalReportLine}
 */
proto.ReceiptJournalReport.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ReceiptJournalReportLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReceiptJournalReport} returns this
 */
proto.ReceiptJournalReport.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.ReceiptJournalReport.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReceiptJournalReport} returns this
 */
proto.ReceiptJournalReport.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransactionDumpReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionDumpReport.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionDumpReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionDumpReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionDumpReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.TransactionReportLine.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionDumpReport}
 */
proto.TransactionDumpReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionDumpReport;
  return proto.TransactionDumpReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionDumpReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionDumpReport}
 */
proto.TransactionDumpReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TransactionReportLine;
      reader.readMessage(value,proto.TransactionReportLine.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionDumpReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionDumpReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionDumpReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionDumpReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TransactionReportLine.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated TransactionReportLine data = 1;
 * @return {!Array<!proto.TransactionReportLine>}
 */
proto.TransactionDumpReport.prototype.getDataList = function() {
  return /** @type{!Array<!proto.TransactionReportLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TransactionReportLine, 1));
};


/**
 * @param {!Array<!proto.TransactionReportLine>} value
 * @return {!proto.TransactionDumpReport} returns this
*/
proto.TransactionDumpReport.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TransactionReportLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TransactionReportLine}
 */
proto.TransactionDumpReport.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TransactionReportLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TransactionDumpReport} returns this
 */
proto.TransactionDumpReport.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.TransactionDumpReport.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransactionDumpReport} returns this
 */
proto.TransactionDumpReport.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimeoffReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeoffReport.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeoffReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeoffReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoffReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.TimeoffReportLine.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeoffReport}
 */
proto.TimeoffReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeoffReport;
  return proto.TimeoffReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeoffReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeoffReport}
 */
proto.TimeoffReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TimeoffReportLine;
      reader.readMessage(value,proto.TimeoffReportLine.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeoffReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeoffReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeoffReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoffReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TimeoffReportLine.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated TimeoffReportLine data = 1;
 * @return {!Array<!proto.TimeoffReportLine>}
 */
proto.TimeoffReport.prototype.getDataList = function() {
  return /** @type{!Array<!proto.TimeoffReportLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimeoffReportLine, 1));
};


/**
 * @param {!Array<!proto.TimeoffReportLine>} value
 * @return {!proto.TimeoffReport} returns this
*/
proto.TimeoffReport.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TimeoffReportLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimeoffReportLine}
 */
proto.TimeoffReport.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TimeoffReportLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimeoffReport} returns this
 */
proto.TimeoffReport.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.TimeoffReport.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimeoffReport} returns this
 */
proto.TimeoffReport.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
