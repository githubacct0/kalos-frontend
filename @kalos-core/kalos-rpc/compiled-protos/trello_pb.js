// source: trello.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.Board', null, global);
goog.exportSymbol('proto.BoardIdList', null, global);
goog.exportSymbol('proto.BoardList', null, global);
goog.exportSymbol('proto.BoardPrefs', null, global);
goog.exportSymbol('proto.LabelNames', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BoardPrefs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BoardPrefs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BoardPrefs.displayName = 'proto.BoardPrefs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LabelNames = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LabelNames, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LabelNames.displayName = 'proto.LabelNames';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Board = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Board, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Board.displayName = 'proto.Board';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BoardList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BoardList.repeatedFields_, null);
};
goog.inherits(proto.BoardList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BoardList.displayName = 'proto.BoardList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BoardIdList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BoardIdList.repeatedFields_, null);
};
goog.inherits(proto.BoardIdList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BoardIdList.displayName = 'proto.BoardIdList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BoardPrefs.prototype.toObject = function(opt_includeInstance) {
  return proto.BoardPrefs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BoardPrefs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoardPrefs.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissionLevel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    voting: jspb.Message.getFieldWithDefault(msg, 2, ""),
    comments: jspb.Message.getFieldWithDefault(msg, 3, ""),
    invitations: jspb.Message.getFieldWithDefault(msg, 4, ""),
    selfJoin: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    cardCovers: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    cardAging: jspb.Message.getFieldWithDefault(msg, 7, ""),
    calendarFeedEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    background: jspb.Message.getFieldWithDefault(msg, 9, ""),
    backgroundColor: jspb.Message.getFieldWithDefault(msg, 10, ""),
    backgroundImage: jspb.Message.getFieldWithDefault(msg, 11, ""),
    backgroundTile: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    backgroundBrightness: jspb.Message.getFieldWithDefault(msg, 14, ""),
    canBePublic: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    canBeOrg: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    canBePrivate: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    canInvite: jspb.Message.getBooleanFieldWithDefault(msg, 18, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BoardPrefs}
 */
proto.BoardPrefs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BoardPrefs;
  return proto.BoardPrefs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BoardPrefs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BoardPrefs}
 */
proto.BoardPrefs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermissionLevel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoting(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitations(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelfJoin(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCardCovers(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardAging(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCalendarFeedEnabled(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackground(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackgroundColor(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackgroundImage(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBackgroundTile(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackgroundBrightness(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBePublic(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBeOrg(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBePrivate(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanInvite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BoardPrefs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BoardPrefs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BoardPrefs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoardPrefs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissionLevel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVoting();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComments();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInvitations();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSelfJoin();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCardCovers();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCardAging();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCalendarFeedEnabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getBackground();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBackgroundColor();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBackgroundImage();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getBackgroundTile();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getBackgroundBrightness();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getCanBePublic();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getCanBeOrg();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getCanBePrivate();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getCanInvite();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
};


/**
 * optional string permission_level = 1;
 * @return {string}
 */
proto.BoardPrefs.prototype.getPermissionLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setPermissionLevel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string voting = 2;
 * @return {string}
 */
proto.BoardPrefs.prototype.getVoting = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setVoting = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string comments = 3;
 * @return {string}
 */
proto.BoardPrefs.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setComments = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string invitations = 4;
 * @return {string}
 */
proto.BoardPrefs.prototype.getInvitations = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setInvitations = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool self_join = 5;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getSelfJoin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setSelfJoin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool card_covers = 6;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getCardCovers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCardCovers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string card_aging = 7;
 * @return {string}
 */
proto.BoardPrefs.prototype.getCardAging = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCardAging = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool calendar_feed_enabled = 8;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getCalendarFeedEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCalendarFeedEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string background = 9;
 * @return {string}
 */
proto.BoardPrefs.prototype.getBackground = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setBackground = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string background_color = 10;
 * @return {string}
 */
proto.BoardPrefs.prototype.getBackgroundColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setBackgroundColor = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string background_image = 11;
 * @return {string}
 */
proto.BoardPrefs.prototype.getBackgroundImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setBackgroundImage = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool background_tile = 13;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getBackgroundTile = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setBackgroundTile = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string background_brightness = 14;
 * @return {string}
 */
proto.BoardPrefs.prototype.getBackgroundBrightness = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setBackgroundBrightness = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool can_be_public = 15;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getCanBePublic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCanBePublic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool can_be_org = 16;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getCanBeOrg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCanBeOrg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool can_be_private = 17;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getCanBePrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCanBePrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool can_invite = 18;
 * @return {boolean}
 */
proto.BoardPrefs.prototype.getCanInvite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BoardPrefs} returns this
 */
proto.BoardPrefs.prototype.setCanInvite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LabelNames.prototype.toObject = function(opt_includeInstance) {
  return proto.LabelNames.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LabelNames} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LabelNames.toObject = function(includeInstance, msg) {
  var f, obj = {
    black: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    green: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orange: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pink: jspb.Message.getFieldWithDefault(msg, 6, ""),
    purple: jspb.Message.getFieldWithDefault(msg, 7, ""),
    red: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sky: jspb.Message.getFieldWithDefault(msg, 9, ""),
    yellow: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LabelNames}
 */
proto.LabelNames.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LabelNames;
  return proto.LabelNames.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LabelNames} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LabelNames}
 */
proto.LabelNames.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlack(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreen(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrange(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPink(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurple(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRed(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSky(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setYellow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LabelNames.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LabelNames.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LabelNames} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LabelNames.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlack();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGreen();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrange();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPurple();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRed();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSky();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getYellow();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string black = 1;
 * @return {string}
 */
proto.LabelNames.prototype.getBlack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setBlack = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blue = 2;
 * @return {string}
 */
proto.LabelNames.prototype.getBlue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setBlue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string green = 3;
 * @return {string}
 */
proto.LabelNames.prototype.getGreen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setGreen = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string lime = 4;
 * @return {string}
 */
proto.LabelNames.prototype.getLime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setLime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string orange = 5;
 * @return {string}
 */
proto.LabelNames.prototype.getOrange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setOrange = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string pink = 6;
 * @return {string}
 */
proto.LabelNames.prototype.getPink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setPink = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string purple = 7;
 * @return {string}
 */
proto.LabelNames.prototype.getPurple = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setPurple = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string red = 8;
 * @return {string}
 */
proto.LabelNames.prototype.getRed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setRed = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string sky = 9;
 * @return {string}
 */
proto.LabelNames.prototype.getSky = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setSky = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string yellow = 10;
 * @return {string}
 */
proto.LabelNames.prototype.getYellow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.LabelNames} returns this
 */
proto.LabelNames.prototype.setYellow = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Board.prototype.toObject = function(opt_includeInstance) {
  return proto.Board.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Board} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Board.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    closed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    organizationId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pinned: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    starred: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    url: jspb.Message.getFieldWithDefault(msg, 8, ""),
    shortUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    prefs: (f = msg.getPrefs()) && proto.BoardPrefs.toObject(includeInstance, f),
    subscribed: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    labelNames: (f = msg.getLabelNames()) && proto.LabelNames.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Board}
 */
proto.Board.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Board;
  return proto.Board.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Board} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Board}
 */
proto.Board.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClosed(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStarred(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortUrl(value);
      break;
    case 10:
      var value = new proto.BoardPrefs;
      reader.readMessage(value,proto.BoardPrefs.deserializeBinaryFromReader);
      msg.setPrefs(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribed(value);
      break;
    case 12:
      var value = new proto.LabelNames;
      reader.readMessage(value,proto.LabelNames.deserializeBinaryFromReader);
      msg.setLabelNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Board.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Board.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Board} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Board.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClosed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getStarred();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getShortUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPrefs();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.BoardPrefs.serializeBinaryToWriter
    );
  }
  f = message.getSubscribed();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getLabelNames();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.LabelNames.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Board.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Board.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.Board.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool closed = 4;
 * @return {boolean}
 */
proto.Board.prototype.getClosed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setClosed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string organization_id = 5;
 * @return {string}
 */
proto.Board.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool pinned = 6;
 * @return {boolean}
 */
proto.Board.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setPinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool starred = 7;
 * @return {boolean}
 */
proto.Board.prototype.getStarred = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setStarred = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string url = 8;
 * @return {string}
 */
proto.Board.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string short_url = 9;
 * @return {string}
 */
proto.Board.prototype.getShortUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setShortUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional BoardPrefs prefs = 10;
 * @return {?proto.BoardPrefs}
 */
proto.Board.prototype.getPrefs = function() {
  return /** @type{?proto.BoardPrefs} */ (
    jspb.Message.getWrapperField(this, proto.BoardPrefs, 10));
};


/**
 * @param {?proto.BoardPrefs|undefined} value
 * @return {!proto.Board} returns this
*/
proto.Board.prototype.setPrefs = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.clearPrefs = function() {
  return this.setPrefs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Board.prototype.hasPrefs = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool subscribed = 11;
 * @return {boolean}
 */
proto.Board.prototype.getSubscribed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.setSubscribed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional LabelNames label_names = 12;
 * @return {?proto.LabelNames}
 */
proto.Board.prototype.getLabelNames = function() {
  return /** @type{?proto.LabelNames} */ (
    jspb.Message.getWrapperField(this, proto.LabelNames, 12));
};


/**
 * @param {?proto.LabelNames|undefined} value
 * @return {!proto.Board} returns this
*/
proto.Board.prototype.setLabelNames = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Board} returns this
 */
proto.Board.prototype.clearLabelNames = function() {
  return this.setLabelNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Board.prototype.hasLabelNames = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BoardList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BoardList.prototype.toObject = function(opt_includeInstance) {
  return proto.BoardList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BoardList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoardList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.Board.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BoardList}
 */
proto.BoardList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BoardList;
  return proto.BoardList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BoardList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BoardList}
 */
proto.BoardList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Board;
      reader.readMessage(value,proto.Board.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BoardList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BoardList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BoardList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoardList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Board.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Board results = 1;
 * @return {!Array<!proto.Board>}
 */
proto.BoardList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.Board>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Board, 1));
};


/**
 * @param {!Array<!proto.Board>} value
 * @return {!proto.BoardList} returns this
*/
proto.BoardList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Board=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Board}
 */
proto.BoardList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Board, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BoardList} returns this
 */
proto.BoardList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.BoardList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BoardList} returns this
 */
proto.BoardList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BoardIdList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BoardIdList.prototype.toObject = function(opt_includeInstance) {
  return proto.BoardIdList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BoardIdList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoardIdList.toObject = function(includeInstance, msg) {
  var f, obj = {
    idListList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BoardIdList}
 */
proto.BoardIdList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BoardIdList;
  return proto.BoardIdList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BoardIdList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BoardIdList}
 */
proto.BoardIdList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BoardIdList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BoardIdList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BoardIdList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoardIdList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string id_list = 1;
 * @return {!Array<string>}
 */
proto.BoardIdList.prototype.getIdListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.BoardIdList} returns this
 */
proto.BoardIdList.prototype.setIdListList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.BoardIdList} returns this
 */
proto.BoardIdList.prototype.addIdList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BoardIdList} returns this
 */
proto.BoardIdList.prototype.clearIdListList = function() {
  return this.setIdListList([]);
};


goog.object.extend(exports, proto);
