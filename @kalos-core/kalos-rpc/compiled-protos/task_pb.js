// source: task.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var spiff_tool_admin_action_pb = require('./spiff_tool_admin_action_pb.js');
goog.object.extend(proto, spiff_tool_admin_action_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var user_pb = require('./user_pb.js');
goog.object.extend(proto, user_pb);
goog.exportSymbol('proto.ProjectTask', null, global);
goog.exportSymbol('proto.ProjectTaskList', null, global);
goog.exportSymbol('proto.Spiff', null, global);
goog.exportSymbol('proto.SpiffDuplicate', null, global);
goog.exportSymbol('proto.SpiffList', null, global);
goog.exportSymbol('proto.SpiffType', null, global);
goog.exportSymbol('proto.SpiffTypeList', null, global);
goog.exportSymbol('proto.Task', null, global);
goog.exportSymbol('proto.TaskBillableTypeList', null, global);
goog.exportSymbol('proto.TaskEventData', null, global);
goog.exportSymbol('proto.TaskList', null, global);
goog.exportSymbol('proto.TaskPriority', null, global);
goog.exportSymbol('proto.TaskPriorityList', null, global);
goog.exportSymbol('proto.TaskStatus', null, global);
goog.exportSymbol('proto.TaskStatusList', null, global);
goog.exportSymbol('proto.ToolFund', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Task.repeatedFields_, null);
};
goog.inherits(proto.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Task.displayName = 'proto.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TaskList.repeatedFields_, null);
};
goog.inherits(proto.TaskList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskList.displayName = 'proto.TaskList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ToolFund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ToolFund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ToolFund.displayName = 'proto.ToolFund';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Spiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Spiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Spiff.displayName = 'proto.Spiff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpiffList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpiffList.repeatedFields_, null);
};
goog.inherits(proto.SpiffList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpiffList.displayName = 'proto.SpiffList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskEventData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TaskEventData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskEventData.displayName = 'proto.TaskEventData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TaskStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskStatus.displayName = 'proto.TaskStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskPriority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TaskPriority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskPriority.displayName = 'proto.TaskPriority';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskPriorityList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TaskPriorityList.repeatedFields_, null);
};
goog.inherits(proto.TaskPriorityList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskPriorityList.displayName = 'proto.TaskPriorityList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpiffDuplicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpiffDuplicate.repeatedFields_, null);
};
goog.inherits(proto.SpiffDuplicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpiffDuplicate.displayName = 'proto.SpiffDuplicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpiffType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpiffType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpiffType.displayName = 'proto.SpiffType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpiffTypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpiffTypeList.repeatedFields_, null);
};
goog.inherits(proto.SpiffTypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpiffTypeList.displayName = 'proto.SpiffTypeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProjectTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProjectTask.repeatedFields_, null);
};
goog.inherits(proto.ProjectTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProjectTask.displayName = 'proto.ProjectTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProjectTaskList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProjectTaskList.repeatedFields_, null);
};
goog.inherits(proto.ProjectTaskList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProjectTaskList.displayName = 'proto.ProjectTaskList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskStatusList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TaskStatusList.repeatedFields_, null);
};
goog.inherits(proto.TaskStatusList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskStatusList.displayName = 'proto.TaskStatusList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskBillableTypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TaskBillableTypeList.repeatedFields_, null);
};
goog.inherits(proto.TaskBillableTypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskBillableTypeList.displayName = 'proto.TaskBillableTypeList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Task.repeatedFields_ = [33,35,38,43,45,48];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    externalId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    externalCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    referenceNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    creatorUserId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timeCreated: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timeDue: jspb.Message.getFieldWithDefault(msg, 7, ""),
    briefDescription: jspb.Message.getFieldWithDefault(msg, 8, ""),
    details: jspb.Message.getFieldWithDefault(msg, 9, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 10, ""),
    statusId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    priorityId: jspb.Message.getFieldWithDefault(msg, 12, 0),
    referenceUrl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    billable: jspb.Message.getFieldWithDefault(msg, 15, 0),
    billableType: jspb.Message.getFieldWithDefault(msg, 16, ""),
    flatRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    hourlyStart: jspb.Message.getFieldWithDefault(msg, 18, ""),
    hourlyEnd: jspb.Message.getFieldWithDefault(msg, 19, ""),
    address: jspb.Message.getFieldWithDefault(msg, 20, ""),
    orderNum: jspb.Message.getFieldWithDefault(msg, 21, ""),
    spiffAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    spiffJobNumber: jspb.Message.getFieldWithDefault(msg, 23, ""),
    spiffTypeId: jspb.Message.getFieldWithDefault(msg, 24, 0),
    spiffAddress: jspb.Message.getFieldWithDefault(msg, 25, ""),
    toolpurchaseDate: jspb.Message.getFieldWithDefault(msg, 26, ""),
    toolpurchaseCost: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 0.0),
    toolpurchaseFile: jspb.Message.getFieldWithDefault(msg, 28, ""),
    adminActionId: jspb.Message.getFieldWithDefault(msg, 29, 0),
    datePerformed: jspb.Message.getFieldWithDefault(msg, 30, ""),
    spiffToolId: jspb.Message.getFieldWithDefault(msg, 31, ""),
    spiffToolCloseoutDate: jspb.Message.getFieldWithDefault(msg, 32, ""),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 33)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 34, 0),
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 35)) == null ? undefined : f,
    event: (f = msg.getEvent()) && proto.TaskEventData.toObject(includeInstance, f),
    ownerName: jspb.Message.getFieldWithDefault(msg, 37, ""),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    spiff_tool_admin_action_pb.SpiffToolAdminAction.toObject, includeInstance),
    status: (f = msg.getStatus()) && proto.TaskStatus.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 40, ""),
    orderDir: jspb.Message.getFieldWithDefault(msg, 41, ""),
    dateTargetList: (f = jspb.Message.getRepeatedField(msg, 43)) == null ? undefined : f,
    referenceAction: (f = msg.getReferenceAction()) && spiff_tool_admin_action_pb.SpiffToolAdminAction.toObject(includeInstance, f),
    duplicatesList: jspb.Message.toObjectList(msg.getDuplicatesList(),
    proto.SpiffDuplicate.toObject, includeInstance),
    eventId: jspb.Message.getFieldWithDefault(msg, 46, 0),
    groupBy: jspb.Message.getFieldWithDefault(msg, 47, ""),
    notEqualsList: (f = jspb.Message.getRepeatedField(msg, 48)) == null ? undefined : f,
    payrollProcessed: jspb.Message.getBooleanFieldWithDefault(msg, 49, false),
    searchAction: (f = msg.getSearchAction()) && spiff_tool_admin_action_pb.SpiffToolAdminAction.toObject(includeInstance, f),
    needsAuditing: jspb.Message.getBooleanFieldWithDefault(msg, 51, false),
    searchUser: (f = msg.getSearchUser()) && user_pb.User.toObject(includeInstance, f),
    spiffType: (f = msg.getSpiffType()) && proto.SpiffType.toObject(includeInstance, f),
    checkedIn: jspb.Message.getBooleanFieldWithDefault(msg, 54, false),
    withoutLimit: jspb.Message.getBooleanFieldWithDefault(msg, 55, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Task}
 */
proto.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Task;
  return proto.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Task}
 */
proto.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExternalId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceNumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatorUserId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeCreated(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeDue(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBriefDescription(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriorityId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceUrl(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBillable(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillableType(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFlatRate(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyStart(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyEnd(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderNum(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpiffAmount(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffJobNumber(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpiffTypeId(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffAddress(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setToolpurchaseDate(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setToolpurchaseCost(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setToolpurchaseFile(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdminActionId(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatePerformed(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffToolId(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffToolCloseoutDate(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    case 36:
      var value = new proto.TaskEventData;
      reader.readMessage(value,proto.TaskEventData.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerName(value);
      break;
    case 38:
      var value = new spiff_tool_admin_action_pb.SpiffToolAdminAction;
      reader.readMessage(value,spiff_tool_admin_action_pb.SpiffToolAdminAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 39:
      var value = new proto.TaskStatus;
      reader.readMessage(value,proto.TaskStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 40:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDir(value);
      break;
    case 43:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateTarget(value);
      break;
    case 44:
      var value = new spiff_tool_admin_action_pb.SpiffToolAdminAction;
      reader.readMessage(value,spiff_tool_admin_action_pb.SpiffToolAdminAction.deserializeBinaryFromReader);
      msg.setReferenceAction(value);
      break;
    case 45:
      var value = new proto.SpiffDuplicate;
      reader.readMessage(value,proto.SpiffDuplicate.deserializeBinaryFromReader);
      msg.addDuplicates(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 47:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupBy(value);
      break;
    case 48:
      var value = /** @type {string} */ (reader.readString());
      msg.addNotEquals(value);
      break;
    case 49:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPayrollProcessed(value);
      break;
    case 50:
      var value = new spiff_tool_admin_action_pb.SpiffToolAdminAction;
      reader.readMessage(value,spiff_tool_admin_action_pb.SpiffToolAdminAction.deserializeBinaryFromReader);
      msg.setSearchAction(value);
      break;
    case 51:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedsAuditing(value);
      break;
    case 52:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSearchUser(value);
      break;
    case 53:
      var value = new proto.SpiffType;
      reader.readMessage(value,proto.SpiffType.deserializeBinaryFromReader);
      msg.setSpiffType(value);
      break;
    case 54:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckedIn(value);
      break;
    case 55:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExternalId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExternalCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReferenceNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatorUserId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTimeCreated();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTimeDue();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBriefDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStatusId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPriorityId();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getReferenceUrl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getBillable();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getBillableType();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getFlatRate();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getHourlyStart();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getHourlyEnd();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getOrderNum();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getSpiffAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getSpiffJobNumber();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getSpiffTypeId();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getSpiffAddress();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getToolpurchaseDate();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getToolpurchaseCost();
  if (f !== 0.0) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getToolpurchaseFile();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getAdminActionId();
  if (f !== 0) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = message.getDatePerformed();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getSpiffToolId();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getSpiffToolCloseoutDate();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      33,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      34,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      35,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.TaskEventData.serializeBinaryToWriter
    );
  }
  f = message.getOwnerName();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      38,
      f,
      spiff_tool_admin_action_pb.SpiffToolAdminAction.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.TaskStatus.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      40,
      f
    );
  }
  f = message.getOrderDir();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getDateTargetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      43,
      f
    );
  }
  f = message.getReferenceAction();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      spiff_tool_admin_action_pb.SpiffToolAdminAction.serializeBinaryToWriter
    );
  }
  f = message.getDuplicatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      45,
      f,
      proto.SpiffDuplicate.serializeBinaryToWriter
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      46,
      f
    );
  }
  f = message.getGroupBy();
  if (f.length > 0) {
    writer.writeString(
      47,
      f
    );
  }
  f = message.getNotEqualsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      48,
      f
    );
  }
  f = message.getPayrollProcessed();
  if (f) {
    writer.writeBool(
      49,
      f
    );
  }
  f = message.getSearchAction();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      spiff_tool_admin_action_pb.SpiffToolAdminAction.serializeBinaryToWriter
    );
  }
  f = message.getNeedsAuditing();
  if (f) {
    writer.writeBool(
      51,
      f
    );
  }
  f = message.getSearchUser();
  if (f != null) {
    writer.writeMessage(
      52,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getSpiffType();
  if (f != null) {
    writer.writeMessage(
      53,
      f,
      proto.SpiffType.serializeBinaryToWriter
    );
  }
  f = message.getCheckedIn();
  if (f) {
    writer.writeBool(
      54,
      f
    );
  }
  f = message.getWithoutLimit();
  if (f) {
    writer.writeBool(
      55,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Task.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 external_id = 2;
 * @return {number}
 */
proto.Task.prototype.getExternalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string external_code = 3;
 * @return {string}
 */
proto.Task.prototype.getExternalCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setExternalCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string reference_number = 4;
 * @return {string}
 */
proto.Task.prototype.getReferenceNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setReferenceNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 creator_user_id = 5;
 * @return {number}
 */
proto.Task.prototype.getCreatorUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setCreatorUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string time_created = 6;
 * @return {string}
 */
proto.Task.prototype.getTimeCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setTimeCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string time_due = 7;
 * @return {string}
 */
proto.Task.prototype.getTimeDue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setTimeDue = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string brief_description = 8;
 * @return {string}
 */
proto.Task.prototype.getBriefDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setBriefDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string details = 9;
 * @return {string}
 */
proto.Task.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string notes = 10;
 * @return {string}
 */
proto.Task.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 status_id = 11;
 * @return {number}
 */
proto.Task.prototype.getStatusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setStatusId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 priority_id = 12;
 * @return {number}
 */
proto.Task.prototype.getPriorityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setPriorityId = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string reference_url = 13;
 * @return {string}
 */
proto.Task.prototype.getReferenceUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setReferenceUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool is_active = 14;
 * @return {boolean}
 */
proto.Task.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 billable = 15;
 * @return {number}
 */
proto.Task.prototype.getBillable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setBillable = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string billable_type = 16;
 * @return {string}
 */
proto.Task.prototype.getBillableType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setBillableType = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional double flat_rate = 17;
 * @return {number}
 */
proto.Task.prototype.getFlatRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setFlatRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional string hourly_start = 18;
 * @return {string}
 */
proto.Task.prototype.getHourlyStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setHourlyStart = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string hourly_end = 19;
 * @return {string}
 */
proto.Task.prototype.getHourlyEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setHourlyEnd = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string address = 20;
 * @return {string}
 */
proto.Task.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string order_num = 21;
 * @return {string}
 */
proto.Task.prototype.getOrderNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setOrderNum = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional double spiff_amount = 22;
 * @return {number}
 */
proto.Task.prototype.getSpiffAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setSpiffAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional string spiff_job_number = 23;
 * @return {string}
 */
proto.Task.prototype.getSpiffJobNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setSpiffJobNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional int32 spiff_type_id = 24;
 * @return {number}
 */
proto.Task.prototype.getSpiffTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setSpiffTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional string spiff_address = 25;
 * @return {string}
 */
proto.Task.prototype.getSpiffAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setSpiffAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional string toolpurchase_date = 26;
 * @return {string}
 */
proto.Task.prototype.getToolpurchaseDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setToolpurchaseDate = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional double toolpurchase_cost = 27;
 * @return {number}
 */
proto.Task.prototype.getToolpurchaseCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setToolpurchaseCost = function(value) {
  return jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional string toolpurchase_file = 28;
 * @return {string}
 */
proto.Task.prototype.getToolpurchaseFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setToolpurchaseFile = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional int32 admin_action_id = 29;
 * @return {number}
 */
proto.Task.prototype.getAdminActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setAdminActionId = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional string date_performed = 30;
 * @return {string}
 */
proto.Task.prototype.getDatePerformed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setDatePerformed = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string spiff_tool_id = 31;
 * @return {string}
 */
proto.Task.prototype.getSpiffToolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setSpiffToolId = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string spiff_tool_closeout_date = 32;
 * @return {string}
 */
proto.Task.prototype.getSpiffToolCloseoutDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setSpiffToolCloseoutDate = function(value) {
  return jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * repeated string field_mask = 33;
 * @return {!Array<string>}
 */
proto.Task.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 33));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 33, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 33, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 34;
 * @return {number}
 */
proto.Task.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * repeated string date_range = 35;
 * @return {!Array<string>}
 */
proto.Task.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 35));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};


/**
 * optional TaskEventData event = 36;
 * @return {?proto.TaskEventData}
 */
proto.Task.prototype.getEvent = function() {
  return /** @type{?proto.TaskEventData} */ (
    jspb.Message.getWrapperField(this, proto.TaskEventData, 36));
};


/**
 * @param {?proto.TaskEventData|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional string owner_name = 37;
 * @return {string}
 */
proto.Task.prototype.getOwnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setOwnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * repeated SpiffToolAdminAction actions = 38;
 * @return {!Array<!proto.SpiffToolAdminAction>}
 */
proto.Task.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.SpiffToolAdminAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, spiff_tool_admin_action_pb.SpiffToolAdminAction, 38));
};


/**
 * @param {!Array<!proto.SpiffToolAdminAction>} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 38, value);
};


/**
 * @param {!proto.SpiffToolAdminAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpiffToolAdminAction}
 */
proto.Task.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 38, opt_value, proto.SpiffToolAdminAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional TaskStatus status = 39;
 * @return {?proto.TaskStatus}
 */
proto.Task.prototype.getStatus = function() {
  return /** @type{?proto.TaskStatus} */ (
    jspb.Message.getWrapperField(this, proto.TaskStatus, 39));
};


/**
 * @param {?proto.TaskStatus|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 39, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional string order_by = 40;
 * @return {string}
 */
proto.Task.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 40, value);
};


/**
 * optional string order_dir = 41;
 * @return {string}
 */
proto.Task.prototype.getOrderDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setOrderDir = function(value) {
  return jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * repeated string date_target = 43;
 * @return {!Array<string>}
 */
proto.Task.prototype.getDateTargetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 43));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setDateTargetList = function(value) {
  return jspb.Message.setField(this, 43, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.addDateTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 43, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearDateTargetList = function() {
  return this.setDateTargetList([]);
};


/**
 * optional SpiffToolAdminAction reference_action = 44;
 * @return {?proto.SpiffToolAdminAction}
 */
proto.Task.prototype.getReferenceAction = function() {
  return /** @type{?proto.SpiffToolAdminAction} */ (
    jspb.Message.getWrapperField(this, spiff_tool_admin_action_pb.SpiffToolAdminAction, 44));
};


/**
 * @param {?proto.SpiffToolAdminAction|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setReferenceAction = function(value) {
  return jspb.Message.setWrapperField(this, 44, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearReferenceAction = function() {
  return this.setReferenceAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasReferenceAction = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * repeated SpiffDuplicate duplicates = 45;
 * @return {!Array<!proto.SpiffDuplicate>}
 */
proto.Task.prototype.getDuplicatesList = function() {
  return /** @type{!Array<!proto.SpiffDuplicate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpiffDuplicate, 45));
};


/**
 * @param {!Array<!proto.SpiffDuplicate>} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setDuplicatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 45, value);
};


/**
 * @param {!proto.SpiffDuplicate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpiffDuplicate}
 */
proto.Task.prototype.addDuplicates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 45, opt_value, proto.SpiffDuplicate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearDuplicatesList = function() {
  return this.setDuplicatesList([]);
};


/**
 * optional int32 event_id = 46;
 * @return {number}
 */
proto.Task.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/**
 * @param {number} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 46, value);
};


/**
 * optional string group_by = 47;
 * @return {string}
 */
proto.Task.prototype.getGroupBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 47, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setGroupBy = function(value) {
  return jspb.Message.setProto3StringField(this, 47, value);
};


/**
 * repeated string not_equals = 48;
 * @return {!Array<string>}
 */
proto.Task.prototype.getNotEqualsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 48));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setNotEqualsList = function(value) {
  return jspb.Message.setField(this, 48, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.addNotEquals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 48, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearNotEqualsList = function() {
  return this.setNotEqualsList([]);
};


/**
 * optional bool payroll_processed = 49;
 * @return {boolean}
 */
proto.Task.prototype.getPayrollProcessed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 49, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setPayrollProcessed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 49, value);
};


/**
 * optional SpiffToolAdminAction search_action = 50;
 * @return {?proto.SpiffToolAdminAction}
 */
proto.Task.prototype.getSearchAction = function() {
  return /** @type{?proto.SpiffToolAdminAction} */ (
    jspb.Message.getWrapperField(this, spiff_tool_admin_action_pb.SpiffToolAdminAction, 50));
};


/**
 * @param {?proto.SpiffToolAdminAction|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setSearchAction = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearSearchAction = function() {
  return this.setSearchAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasSearchAction = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional bool needs_auditing = 51;
 * @return {boolean}
 */
proto.Task.prototype.getNeedsAuditing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 51, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setNeedsAuditing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 51, value);
};


/**
 * optional User search_user = 52;
 * @return {?proto.User}
 */
proto.Task.prototype.getSearchUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 52));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setSearchUser = function(value) {
  return jspb.Message.setWrapperField(this, 52, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearSearchUser = function() {
  return this.setSearchUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasSearchUser = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional SpiffType spiff_type = 53;
 * @return {?proto.SpiffType}
 */
proto.Task.prototype.getSpiffType = function() {
  return /** @type{?proto.SpiffType} */ (
    jspb.Message.getWrapperField(this, proto.SpiffType, 53));
};


/**
 * @param {?proto.SpiffType|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setSpiffType = function(value) {
  return jspb.Message.setWrapperField(this, 53, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearSpiffType = function() {
  return this.setSpiffType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasSpiffType = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional bool checked_in = 54;
 * @return {boolean}
 */
proto.Task.prototype.getCheckedIn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 54, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setCheckedIn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 54, value);
};


/**
 * optional bool without_limit = 55;
 * @return {boolean}
 */
proto.Task.prototype.getWithoutLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 55, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setWithoutLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 55, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TaskList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskList.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.Task.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskList}
 */
proto.TaskList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskList;
  return proto.TaskList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskList}
 */
proto.TaskList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Task;
      reader.readMessage(value,proto.Task.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Task.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Task results = 1;
 * @return {!Array<!proto.Task>}
 */
proto.TaskList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Task, 1));
};


/**
 * @param {!Array<!proto.Task>} value
 * @return {!proto.TaskList} returns this
*/
proto.TaskList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Task}
 */
proto.TaskList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TaskList} returns this
 */
proto.TaskList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.TaskList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskList} returns this
 */
proto.TaskList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ToolFund.prototype.toObject = function(opt_includeInstance) {
  return proto.ToolFund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ToolFund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ToolFund.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ToolFund}
 */
proto.ToolFund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ToolFund;
  return proto.ToolFund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ToolFund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ToolFund}
 */
proto.ToolFund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ToolFund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ToolFund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ToolFund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ToolFund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ToolFund.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ToolFund} returns this
 */
proto.ToolFund.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.ToolFund.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ToolFund} returns this
 */
proto.ToolFund.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Spiff.prototype.toObject = function(opt_includeInstance) {
  return proto.Spiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Spiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Spiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeCreated: jspb.Message.getFieldWithDefault(msg, 1, ""),
    briefDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
    details: jspb.Message.getFieldWithDefault(msg, 3, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statusId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    spiffAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    spiffJobnumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    spiffType: jspb.Message.getFieldWithDefault(msg, 8, ""),
    spiffAddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    reviewedBy: jspb.Message.getFieldWithDefault(msg, 10, ""),
    status: jspb.Message.getFieldWithDefault(msg, 11, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 12, ""),
    decisionDate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    externalId: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Spiff}
 */
proto.Spiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Spiff;
  return proto.Spiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Spiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Spiff}
 */
proto.Spiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeCreated(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBriefDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpiffAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffJobnumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiffAddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReviewedBy(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecisionDate(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExternalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Spiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Spiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Spiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Spiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeCreated();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBriefDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatusId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSpiffAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSpiffJobnumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSpiffType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSpiffAddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReviewedBy();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDecisionDate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getExternalId();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * optional string time_created = 1;
 * @return {string}
 */
proto.Spiff.prototype.getTimeCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setTimeCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string brief_description = 2;
 * @return {string}
 */
proto.Spiff.prototype.getBriefDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setBriefDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.Spiff.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string notes = 4;
 * @return {string}
 */
proto.Spiff.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 status_id = 5;
 * @return {number}
 */
proto.Spiff.prototype.getStatusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setStatusId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double spiff_amount = 6;
 * @return {number}
 */
proto.Spiff.prototype.getSpiffAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setSpiffAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string spiff_jobNumber = 7;
 * @return {string}
 */
proto.Spiff.prototype.getSpiffJobnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setSpiffJobnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string spiff_type = 8;
 * @return {string}
 */
proto.Spiff.prototype.getSpiffType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setSpiffType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string spiff_address = 9;
 * @return {string}
 */
proto.Spiff.prototype.getSpiffAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setSpiffAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string reviewed_by = 10;
 * @return {string}
 */
proto.Spiff.prototype.getReviewedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setReviewedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string status = 11;
 * @return {string}
 */
proto.Spiff.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string reason = 12;
 * @return {string}
 */
proto.Spiff.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string decision_date = 13;
 * @return {string}
 */
proto.Spiff.prototype.getDecisionDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setDecisionDate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 external_id = 14;
 * @return {number}
 */
proto.Spiff.prototype.getExternalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.Spiff} returns this
 */
proto.Spiff.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpiffList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpiffList.prototype.toObject = function(opt_includeInstance) {
  return proto.SpiffList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpiffList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsListList: jspb.Message.toObjectList(msg.getResultsListList(),
    proto.Spiff.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpiffList}
 */
proto.SpiffList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpiffList;
  return proto.SpiffList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpiffList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpiffList}
 */
proto.SpiffList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Spiff;
      reader.readMessage(value,proto.Spiff.deserializeBinaryFromReader);
      msg.addResultsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpiffList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpiffList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpiffList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Spiff.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Spiff results_list = 1;
 * @return {!Array<!proto.Spiff>}
 */
proto.SpiffList.prototype.getResultsListList = function() {
  return /** @type{!Array<!proto.Spiff>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Spiff, 1));
};


/**
 * @param {!Array<!proto.Spiff>} value
 * @return {!proto.SpiffList} returns this
*/
proto.SpiffList.prototype.setResultsListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Spiff=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Spiff}
 */
proto.SpiffList.prototype.addResultsList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Spiff, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpiffList} returns this
 */
proto.SpiffList.prototype.clearResultsListList = function() {
  return this.setResultsListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskEventData.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskEventData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskEventData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskEventData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propertyId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    customerId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contractId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contractNumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    logJobNumber: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskEventData}
 */
proto.TaskEventData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskEventData;
  return proto.TaskEventData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskEventData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskEventData}
 */
proto.TaskEventData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractNumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogJobNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskEventData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskEventData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskEventData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskEventData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCustomerId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getContractId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getContractNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLogJobNumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TaskEventData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskEventData} returns this
 */
proto.TaskEventData.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 property_id = 2;
 * @return {number}
 */
proto.TaskEventData.prototype.getPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskEventData} returns this
 */
proto.TaskEventData.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 customer_id = 3;
 * @return {number}
 */
proto.TaskEventData.prototype.getCustomerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskEventData} returns this
 */
proto.TaskEventData.prototype.setCustomerId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 contract_id = 4;
 * @return {number}
 */
proto.TaskEventData.prototype.getContractId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskEventData} returns this
 */
proto.TaskEventData.prototype.setContractId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string contract_number = 5;
 * @return {string}
 */
proto.TaskEventData.prototype.getContractNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TaskEventData} returns this
 */
proto.TaskEventData.prototype.setContractNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string log_job_number = 6;
 * @return {string}
 */
proto.TaskEventData.prototype.getLogJobNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.TaskEventData} returns this
 */
proto.TaskEventData.prototype.setLogJobNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskStatus}
 */
proto.TaskStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskStatus;
  return proto.TaskStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskStatus}
 */
proto.TaskStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TaskStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.TaskStatus.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.TaskStatus.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 weight = 4;
 * @return {number}
 */
proto.TaskStatus.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskPriority.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskPriority.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskPriority} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskPriority.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskPriority}
 */
proto.TaskPriority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskPriority;
  return proto.TaskPriority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskPriority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskPriority}
 */
proto.TaskPriority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskPriority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskPriority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskPriority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskPriority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TaskPriority.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskPriority} returns this
 */
proto.TaskPriority.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.TaskPriority.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TaskPriority} returns this
 */
proto.TaskPriority.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.TaskPriority.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TaskPriority} returns this
 */
proto.TaskPriority.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TaskPriorityList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskPriorityList.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskPriorityList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskPriorityList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskPriorityList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.TaskPriority.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskPriorityList}
 */
proto.TaskPriorityList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskPriorityList;
  return proto.TaskPriorityList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskPriorityList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskPriorityList}
 */
proto.TaskPriorityList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TaskPriority;
      reader.readMessage(value,proto.TaskPriority.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskPriorityList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskPriorityList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskPriorityList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskPriorityList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TaskPriority.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskPriority results = 1;
 * @return {!Array<!proto.TaskPriority>}
 */
proto.TaskPriorityList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.TaskPriority>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskPriority, 1));
};


/**
 * @param {!Array<!proto.TaskPriority>} value
 * @return {!proto.TaskPriorityList} returns this
*/
proto.TaskPriorityList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TaskPriority=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskPriority}
 */
proto.TaskPriorityList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TaskPriority, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TaskPriorityList} returns this
 */
proto.TaskPriorityList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpiffDuplicate.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpiffDuplicate.prototype.toObject = function(opt_includeInstance) {
  return proto.SpiffDuplicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpiffDuplicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffDuplicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    spiffTypeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeDue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownerName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    spiff_tool_admin_action_pb.SpiffToolAdminAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpiffDuplicate}
 */
proto.SpiffDuplicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpiffDuplicate;
  return proto.SpiffDuplicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpiffDuplicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpiffDuplicate}
 */
proto.SpiffDuplicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpiffTypeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeDue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerName(value);
      break;
    case 5:
      var value = new spiff_tool_admin_action_pb.SpiffToolAdminAction;
      reader.readMessage(value,spiff_tool_admin_action_pb.SpiffToolAdminAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpiffDuplicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpiffDuplicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpiffDuplicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffDuplicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSpiffTypeId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTimeDue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnerName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      spiff_tool_admin_action_pb.SpiffToolAdminAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.SpiffDuplicate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffDuplicate} returns this
 */
proto.SpiffDuplicate.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 spiff_type_id = 2;
 * @return {number}
 */
proto.SpiffDuplicate.prototype.getSpiffTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffDuplicate} returns this
 */
proto.SpiffDuplicate.prototype.setSpiffTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string time_due = 3;
 * @return {string}
 */
proto.SpiffDuplicate.prototype.getTimeDue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffDuplicate} returns this
 */
proto.SpiffDuplicate.prototype.setTimeDue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string owner_name = 4;
 * @return {string}
 */
proto.SpiffDuplicate.prototype.getOwnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffDuplicate} returns this
 */
proto.SpiffDuplicate.prototype.setOwnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated SpiffToolAdminAction actions = 5;
 * @return {!Array<!proto.SpiffToolAdminAction>}
 */
proto.SpiffDuplicate.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.SpiffToolAdminAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, spiff_tool_admin_action_pb.SpiffToolAdminAction, 5));
};


/**
 * @param {!Array<!proto.SpiffToolAdminAction>} value
 * @return {!proto.SpiffDuplicate} returns this
*/
proto.SpiffDuplicate.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.SpiffToolAdminAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpiffToolAdminAction}
 */
proto.SpiffDuplicate.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.SpiffToolAdminAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpiffDuplicate} returns this
 */
proto.SpiffDuplicate.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpiffType.prototype.toObject = function(opt_includeInstance) {
  return proto.SpiffType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpiffType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ext: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payout: jspb.Message.getFieldWithDefault(msg, 4, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpiffType}
 */
proto.SpiffType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpiffType;
  return proto.SpiffType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpiffType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpiffType}
 */
proto.SpiffType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayout(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuration(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpiffType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpiffType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpiffType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayout();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDuration();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.SpiffType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffType} returns this
 */
proto.SpiffType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ext = 2;
 * @return {string}
 */
proto.SpiffType.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffType} returns this
 */
proto.SpiffType.prototype.setExt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.SpiffType.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffType} returns this
 */
proto.SpiffType.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string payout = 4;
 * @return {string}
 */
proto.SpiffType.prototype.getPayout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffType} returns this
 */
proto.SpiffType.prototype.setPayout = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string duration = 5;
 * @return {string}
 */
proto.SpiffType.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpiffType} returns this
 */
proto.SpiffType.prototype.setDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool is_active = 6;
 * @return {boolean}
 */
proto.SpiffType.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpiffType} returns this
 */
proto.SpiffType.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpiffTypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpiffTypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.SpiffTypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpiffTypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffTypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.SpiffType.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpiffTypeList}
 */
proto.SpiffTypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpiffTypeList;
  return proto.SpiffTypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpiffTypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpiffTypeList}
 */
proto.SpiffTypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SpiffType;
      reader.readMessage(value,proto.SpiffType.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpiffTypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpiffTypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpiffTypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpiffTypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SpiffType.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated SpiffType results = 1;
 * @return {!Array<!proto.SpiffType>}
 */
proto.SpiffTypeList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.SpiffType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpiffType, 1));
};


/**
 * @param {!Array<!proto.SpiffType>} value
 * @return {!proto.SpiffTypeList} returns this
*/
proto.SpiffTypeList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SpiffType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpiffType}
 */
proto.SpiffTypeList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SpiffType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpiffTypeList} returns this
 */
proto.SpiffTypeList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.SpiffTypeList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpiffTypeList} returns this
 */
proto.SpiffTypeList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProjectTask.repeatedFields_ = [16,18,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProjectTask.prototype.toObject = function(opt_includeInstance) {
  return proto.ProjectTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProjectTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProjectTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    externalId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    externalCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    referenceNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    creatorUserId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timeCreated: jspb.Message.getFieldWithDefault(msg, 6, ""),
    briefDescription: jspb.Message.getFieldWithDefault(msg, 7, ""),
    details: jspb.Message.getFieldWithDefault(msg, 8, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statusId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    priorityId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    startDate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    endDate: jspb.Message.getFieldWithDefault(msg, 14, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 15, 0),
    fieldMaskList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    pageNumber: jspb.Message.getFieldWithDefault(msg, 17, 0),
    dateRangeList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    dateTargetList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    ownerName: jspb.Message.getFieldWithDefault(msg, 20, ""),
    status: (f = msg.getStatus()) && proto.TaskStatus.toObject(includeInstance, f),
    priority: (f = msg.getPriority()) && proto.TaskPriority.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 23, ""),
    orderDir: jspb.Message.getFieldWithDefault(msg, 24, ""),
    groupBy: jspb.Message.getFieldWithDefault(msg, 25, ""),
    checkedIn: jspb.Message.getBooleanFieldWithDefault(msg, 26, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProjectTask}
 */
proto.ProjectTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProjectTask;
  return proto.ProjectTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProjectTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProjectTask}
 */
proto.ProjectTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExternalId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceNumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatorUserId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeCreated(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBriefDescription(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriorityId(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndDate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldMask(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateRange(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addDateTarget(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerName(value);
      break;
    case 21:
      var value = new proto.TaskStatus;
      reader.readMessage(value,proto.TaskStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 22:
      var value = new proto.TaskPriority;
      reader.readMessage(value,proto.TaskPriority.deserializeBinaryFromReader);
      msg.setPriority(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDir(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupBy(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckedIn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProjectTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProjectTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProjectTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProjectTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExternalId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExternalCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReferenceNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatorUserId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTimeCreated();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBriefDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatusId();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPriorityId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getEndDate();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getFieldMaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getDateRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getDateTargetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = message.getOwnerName();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.TaskStatus.serializeBinaryToWriter
    );
  }
  f = message.getPriority();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.TaskPriority.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getOrderDir();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getGroupBy();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getCheckedIn();
  if (f) {
    writer.writeBool(
      26,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ProjectTask.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 external_id = 2;
 * @return {number}
 */
proto.ProjectTask.prototype.getExternalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string external_code = 3;
 * @return {string}
 */
proto.ProjectTask.prototype.getExternalCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setExternalCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string reference_number = 4;
 * @return {string}
 */
proto.ProjectTask.prototype.getReferenceNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setReferenceNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 creator_user_id = 5;
 * @return {number}
 */
proto.ProjectTask.prototype.getCreatorUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setCreatorUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string time_created = 6;
 * @return {string}
 */
proto.ProjectTask.prototype.getTimeCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setTimeCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string brief_description = 7;
 * @return {string}
 */
proto.ProjectTask.prototype.getBriefDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setBriefDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string details = 8;
 * @return {string}
 */
proto.ProjectTask.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string notes = 9;
 * @return {string}
 */
proto.ProjectTask.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 status_id = 10;
 * @return {number}
 */
proto.ProjectTask.prototype.getStatusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setStatusId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 priority_id = 11;
 * @return {number}
 */
proto.ProjectTask.prototype.getPriorityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setPriorityId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool is_active = 12;
 * @return {boolean}
 */
proto.ProjectTask.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string start_date = 13;
 * @return {string}
 */
proto.ProjectTask.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string end_date = 14;
 * @return {string}
 */
proto.ProjectTask.prototype.getEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 event_id = 15;
 * @return {number}
 */
proto.ProjectTask.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * repeated string field_mask = 16;
 * @return {!Array<string>}
 */
proto.ProjectTask.prototype.getFieldMaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setFieldMaskList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.addFieldMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.clearFieldMaskList = function() {
  return this.setFieldMaskList([]);
};


/**
 * optional int32 page_number = 17;
 * @return {number}
 */
proto.ProjectTask.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * repeated string date_range = 18;
 * @return {!Array<string>}
 */
proto.ProjectTask.prototype.getDateRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setDateRangeList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.addDateRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.clearDateRangeList = function() {
  return this.setDateRangeList([]);
};


/**
 * repeated string date_target = 19;
 * @return {!Array<string>}
 */
proto.ProjectTask.prototype.getDateTargetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setDateTargetList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.addDateTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.clearDateTargetList = function() {
  return this.setDateTargetList([]);
};


/**
 * optional string owner_name = 20;
 * @return {string}
 */
proto.ProjectTask.prototype.getOwnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setOwnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional TaskStatus status = 21;
 * @return {?proto.TaskStatus}
 */
proto.ProjectTask.prototype.getStatus = function() {
  return /** @type{?proto.TaskStatus} */ (
    jspb.Message.getWrapperField(this, proto.TaskStatus, 21));
};


/**
 * @param {?proto.TaskStatus|undefined} value
 * @return {!proto.ProjectTask} returns this
*/
proto.ProjectTask.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProjectTask.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional TaskPriority priority = 22;
 * @return {?proto.TaskPriority}
 */
proto.ProjectTask.prototype.getPriority = function() {
  return /** @type{?proto.TaskPriority} */ (
    jspb.Message.getWrapperField(this, proto.TaskPriority, 22));
};


/**
 * @param {?proto.TaskPriority|undefined} value
 * @return {!proto.ProjectTask} returns this
*/
proto.ProjectTask.prototype.setPriority = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.clearPriority = function() {
  return this.setPriority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProjectTask.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string order_by = 23;
 * @return {string}
 */
proto.ProjectTask.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string order_dir = 24;
 * @return {string}
 */
proto.ProjectTask.prototype.getOrderDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setOrderDir = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string group_by = 25;
 * @return {string}
 */
proto.ProjectTask.prototype.getGroupBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setGroupBy = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional bool checked_in = 26;
 * @return {boolean}
 */
proto.ProjectTask.prototype.getCheckedIn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 26, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProjectTask} returns this
 */
proto.ProjectTask.prototype.setCheckedIn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 26, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProjectTaskList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProjectTaskList.prototype.toObject = function(opt_includeInstance) {
  return proto.ProjectTaskList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProjectTaskList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProjectTaskList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.ProjectTask.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProjectTaskList}
 */
proto.ProjectTaskList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProjectTaskList;
  return proto.ProjectTaskList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProjectTaskList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProjectTaskList}
 */
proto.ProjectTaskList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProjectTask;
      reader.readMessage(value,proto.ProjectTask.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProjectTaskList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProjectTaskList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProjectTaskList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProjectTaskList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ProjectTask.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated ProjectTask results = 1;
 * @return {!Array<!proto.ProjectTask>}
 */
proto.ProjectTaskList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.ProjectTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProjectTask, 1));
};


/**
 * @param {!Array<!proto.ProjectTask>} value
 * @return {!proto.ProjectTaskList} returns this
*/
proto.ProjectTaskList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ProjectTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProjectTask}
 */
proto.ProjectTaskList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ProjectTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProjectTaskList} returns this
 */
proto.ProjectTaskList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.ProjectTaskList.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProjectTaskList} returns this
 */
proto.ProjectTaskList.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TaskStatusList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskStatusList.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskStatusList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskStatusList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskStatusList.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.TaskStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskStatusList}
 */
proto.TaskStatusList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskStatusList;
  return proto.TaskStatusList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskStatusList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskStatusList}
 */
proto.TaskStatusList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TaskStatus;
      reader.readMessage(value,proto.TaskStatus.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskStatusList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskStatusList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskStatusList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskStatusList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TaskStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskStatus results = 1;
 * @return {!Array<!proto.TaskStatus>}
 */
proto.TaskStatusList.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.TaskStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskStatus, 1));
};


/**
 * @param {!Array<!proto.TaskStatus>} value
 * @return {!proto.TaskStatusList} returns this
*/
proto.TaskStatusList.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TaskStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskStatus}
 */
proto.TaskStatusList.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TaskStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TaskStatusList} returns this
 */
proto.TaskStatusList.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TaskBillableTypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskBillableTypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskBillableTypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskBillableTypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskBillableTypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskBillableTypeList}
 */
proto.TaskBillableTypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskBillableTypeList;
  return proto.TaskBillableTypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskBillableTypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskBillableTypeList}
 */
proto.TaskBillableTypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskBillableTypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskBillableTypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskBillableTypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskBillableTypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string types = 1;
 * @return {!Array<string>}
 */
proto.TaskBillableTypeList.prototype.getTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TaskBillableTypeList} returns this
 */
proto.TaskBillableTypeList.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TaskBillableTypeList} returns this
 */
proto.TaskBillableTypeList.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TaskBillableTypeList} returns this
 */
proto.TaskBillableTypeList.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


goog.object.extend(exports, proto);
